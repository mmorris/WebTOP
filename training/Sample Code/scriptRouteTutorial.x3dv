#X3D V3.0 utf8
PROFILE Immersive

NavigationInfo 
	{
	speed 100
	}

#Box
DEF myTrans Transform {
	translation 1 0 0
	children [
	DEF myTouch TouchSensor {
		enabled TRUE
		}
	DEF myPlane PlaneSensor {
		enabled TRUE
		minPosition 1 0
		maxPosition 5 0
		}
	Shape {
		appearance Appearance {
			material DEF boxColor Material {
				diffuseColor 1 0 0
				}
			}
		geometry Box {
			size 1 1 1
			}
		}#End Shape	
	]
}
 
DEF myTrans2 Transform {
	translation -1 0 0
	children [
	DEF myPlane2 PlaneSensor {
		enabled TRUE
		minPosition -5 0
		maxPosition -1 0
		}
	Shape {
		appearance Appearance {
			material Material {
				diffuseColor 1 0 0
				}
			}
		geometry Sphere {
		radius 1
		solid TRUE
		}
	}
	]
}

#Big Sphere
DEF mySphere Transform {
	translation 0 -2 0
	scale 1 1 1
	children [
	Shape {
		appearance Appearance {
			material Material {
				diffuseColor 0 1 0
				}
			}
		geometry Sphere {
			radius 1
			solid TRUE
			}
		}
	]
}



## Scripts ##
#Color Change
DEF changeColor Script {
inputOnly SFBool myTouchOn
outputOnly SFColor colorChange

url "ecmascript:
	function myTouchOn(value, time)
		{
		if(value)
			{
			colorChange[0]=0;
			colorChange[1]=1;
			}
		else
			{
			colorChange[0]=1;
			colorChange[1]=0;
			}
		}"
}
#Drag
DEF changeTranslation Script {
inputOnly SFVec3f positionIn
outputOnly SFVec3f positionOut

url "ecmascript:
	function positionIn(value, time)
		{
		positionOut[0]=value[0];
		}"

}

DEF changeTranslationSphere Script {
inputOnly SFVec3f positionIn
outputOnly SFVec3f positionOut

url "ecmascript:
	function positionIn(value, time)
		{
		positionOut[0]=value[0];
		}"

}

#Opposite Direction
DEF moveOppositeSphere Script {
inputOnly SFVec3f positionIn
outputOnly SFVec3f positionOut

url "ecmascript:
	function positionIn(value, time)
		{
		positionOut[0]=-1*value[0];
		}"
}

DEF moveOppositeBox Script {
inputOnly SFVec3f positionIn
outputOnly SFVec3f positionOut

url "ecmascript:
	function positionIn(value, time)
		{
		positionOut[0]=-1*value[0];
		}"
}

#Scaling the Sphere
DEF sphereScale Script {
inputOnly SFVec3f positionIn
outputOnly SFVec3f sphereSize

url "ecmascript:
	function positionIn(value, time)
	{
	sphereSize[0]=value[0]/5.0;
	sphereSize[1]=value[0]/5.0;
	sphereSize[2]=value[0]/5.0;
	}"
}

## ROUTES ##
#Color Change
ROUTE myTouch.isOver TO changeColor.myTouchOn
ROUTE changeColor.colorChange TO boxColor.diffuseColor

##Drag#
#Box
ROUTE myPlane.translation_changed TO changeTranslation.positionIn
ROUTE changeTranslation.positionOut TO myTrans.translation
#Sphere
ROUTE myPlane2.translation_changed TO changeTranslationSphere.positionIn
ROUTE changeTranslationSphere.positionOut TO myTrans2.translation

#Opposite Directions


ROUTE myPlane2.translation_changed TO moveOppositeBox.positionIn
ROUTE moveOppositeBox.positionOut TO myTrans.translation

ROUTE myPlane.translation_changed TO moveOppositeSphere.positionIn
ROUTE moveOppositeSphere.positionOut TO myTrans2.translation

#Scaling the Sphere
ROUTE myTrans.translation TO sphereScale.positionIn
ROUTE sphereScale.sphereSize TO mySphere.scale