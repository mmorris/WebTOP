#X3D V3.0 utf8
PROFILE Immersive 

EXTERNPROTO Red2ConeXDragger [
	inputOutput SFVec3f coneScale
	inputOutput SFVec3f translation
	inputOutput SFRotation rotation
	initializeOnly SFFloat position
	inputOnly SFFloat set_position
	outputOnly SFFloat position_changed
	initializeOnly SFFloat minPosition
	inputOnly SFFloat set_minPosition
	initializeOnly SFFloat maxPosition
	inputOnly SFFloat set_maxPosition
	initializeOnly SFFloat value
	inputOnly SFFloat set_value
	outputOnly SFFloat value_changed
	initializeOnly SFFloat minValue
	inputOnly SFFloat set_minValue
	initializeOnly SFFloat maxValue
	inputOnly SFFloat set_maxValue
	initializeOnly SFBool positionAsValue
	outputOnly SFBool isOver_out
	outputOnly SFBool isActive_out
	inputOnly SFBool set_isActive
	inputOutput SFBool enabled
	initializeOnly SFString debugName
	outputOnly SFBool initialized
]
"x3dlib/Widgets.x3dv#Red2ConeXDragger"

PROTO RotationWidget [
	inputOutput SFVec3f translation 0 0 0
	inputOutput SFRotation rotation 1 0 0 1.570796
	inputOutput SFVec3f scale 1 1 1
	initializeOnly SFFloat angle 0
	inputOnly SFFloat set_angle
	outputOnly SFFloat angle_changed
	#rotation_changed is provided for convenience; will always be (0,0,1,angle_changed)
	outputOnly SFRotation rotation_changed

	initializeOnly SFFloat minAngle 0			#If minAngle > maxAngle (as here), all angles allowed
	inputOnly SFFloat set_minAngle
	initializeOnly SFFloat maxAngle -1
	inputOnly SFFloat set_maxAngle

	initializeOnly SFFloat value 0
	inputOnly SFFloat set_value
	outputOnly SFFloat value_changed

	initializeOnly SFFloat minValue 0
	inputOnly SFFloat set_minValue
	initializeOnly SFFloat maxValue 1
	inputOnly SFFloat set_maxValue

	#If this is TRUE (the default), the min/maxValue fields
	#are ignored and 'angle' and 'value' are equivalent.
	#(This could probably have a better name.)
	initializeOnly SFBool angleAsValue TRUE

	outputOnly SFBool isActive_out
	outputOnly SFBool isOver_out
	#Invoking the following set_ events affects which geometry is displayed.
	inputOnly SFBool set_isActive
	inputOnly SFBool set_isOver

	inputOutput SFBool enabled TRUE

	initializeOnly MFNode normalGeometry []
	initializeOnly MFNode overGeometry []
	initializeOnly MFNode activeGeometry []
	outputOnly SFBool initialized
]
{
	#Group {
	Transform {
		translation IS translation
		rotation IS rotation
		scale IS scale
		children [
			DEF TS2 TouchSensor {
				enabled IS enabled
				isOver IS isOver_out
				isActive IS isActive_out
			}
			DEF PS2 PlaneSensor {
				enabled IS enabled
			}
			DEF RotationalTransform Transform {
				children DEF GeometrySwitch Switch {
					whichChoice 0
					choice [
						Group { children IS normalGeometry }
						Group { children IS overGeometry }
						Group { children IS activeGeometry }
					]
				}
			}
		]
	}

	DEF Worker2 Script {
		#Xj3D hack
		inputOutput SFVec3f translation IS translation
		inputOutput SFVec3f scale IS scale

		initializeOnly SFFloat minAngle IS minAngle
		inputOnly SFFloat set_minAngle IS set_minAngle

		initializeOnly SFFloat maxAngle IS maxAngle
		inputOnly SFFloat set_maxAngle IS set_maxAngle

		initializeOnly SFFloat angle0 IS angle
		inputOnly SFFloat set_angle IS set_angle
		outputOnly SFFloat angle_changed IS angle_changed
		initializeOnly SFRotation rotation 0 0 1 0
		outputOnly SFRotation rotation_changed IS rotation_changed

		initializeOnly SFFloat val0 IS value
		inputOnly SFFloat val_in IS set_value
		outputOnly SFFloat val_out IS value_changed

		initializeOnly		SFFloat minVal IS minValue
		initializeOnly		SFFloat maxVal IS maxValue
		inputOnly SFFloat set_minValue IS set_minValue
		inputOnly SFFloat set_maxValue IS set_maxValue

		initializeOnly SFBool ignoreLogical IS angleAsValue

		inputOnly SFVec3f ps_trans_in
		inputOnly SFVec3f ts_hitPoint_in
		inputOnly SFBool ts_active_in

		outputOnly SFVec3f offset_out

		inputOnly SFBool set_isActive IS set_isActive
		inputOnly SFBool set_isOver IS set_isOver		#Also used by TS

		initializeOnly SFBool firstHitPoint FALSE

		#The current angle of the widget (between drags or individual mouse-moves) is
		#represented as N*(2Pi)+theta; spins holds N and curTheta holds theta.
		initializeOnly SFInt32 spins 0
		initializeOnly SFFloat curTheta 0

		#These keep up with the user's attempt to go past pegging the widget:
		#inputTheta is unclamped, inputSpins is clamped to maximum useful spins + 1
		initializeOnly SFFloat inputTheta 0
		initializeOnly SFInt32 inputSpins 0
		#This still isn't perfect for widgets with non-x-axis stop points... [?]

		#The angle from the widget's x-axis at which the user grabbed it must be considered...
		initializeOnly SFFloat grabDelta 0

		initializeOnly SFFloat grabDeltaTemp 0
		initializeOnly SFVec3f offset_outTemp 0 0 0

		#Memory of mouse activity (for selecting which geometry to display)
		initializeOnly SFBool isActive FALSE
		initializeOnly SFBool isOver FALSE
		outputOnly SFInt32 whichChoice_changed

		initializeOnly MFNode overGeometry IS overGeometry
		initializeOnly MFNode activeGeometry IS activeGeometry

		initializeOnly SFBool inited TRUE				#temp: for compatibility
		outputOnly SFBool initialized IS initialized

		url "ecmascript:
		function initialize() {
			Browser.println('ANGLE 0 = ' + angle0);
			if(ignoreLogical) set_angle(angle0,0);
			else val_in(val0,0);

			inited=true;
			initialized=true;
			//GRANT -- MADE FIRST HIT POINT TRUE UP HERE!!!
			Browser.println('First Hit Point TRUE');
			firstHitPoint = true;
				
		}

		function ps_trans_in(value,time) {
			//Xj3D hack
			//value[0]=value[0]-translation[0]*scale[0];
			//value[1]=value[1]-translation[1]*scale[1];

			var theta = Math.atan2(value[1], value[0])-grabDelta;
			
			while(theta<0) theta += 2*Math.PI;

			//Xj3D hack
			//Browser.println('value: ' + value[0] + ' ' + value[1]);
			//Browser.println('theta: ' + theta);

			//Discard extra spins when crossing the maxAngle/minAngle point
			var angle=currentAngle0(theta,spins);
			Browser.println('ps_trans_in = ' + theta);

			if(theta<Math.PI/2 && inputTheta>=Math.PI*3/2) {
				if(inputSpins<=spins) inputSpins++;		//Extra extra spins are ignored
			} else if(theta>=Math.PI*3/2 && inputTheta<Math.PI/2) {
				if(inputSpins>=spins) inputSpins--;
			} else if(minAngle<maxAngle && ((angle<minAngle && inputSpins<spins) ||
																			(angle>maxAngle && inputSpins>spins))) {
				//Browser.println('(a<min & i<s) | (a>max & i>s)');
				inputSpins=spins;
			}

			inputTheta=theta;
			angle=currentAngle0(theta,inputSpins);

			//Browser.println('inputSpins\': '+inputSpins+'\tangle2: '+angle);
			//Discard invalid values if min and max angles set
			if(minAngle<=maxAngle && (angle<minAngle || angle>maxAngle)) {
				//Browser.println('!denied!');
				var lastAngle=currentAngle();
				//When first crossing the line, peg the widget
				if(lastAngle!=minAngle && lastAngle!=maxAngle)
					set_angle((angle<minAngle)?minAngle:maxAngle,time);
				return;
			}

			//Browser.println('accepted\n\n');
			//Otherwise, update the widget
			spins=inputSpins;
			curTheta = theta;
			send_events(angle);
		}

		//Davis: I'm not sure of the safety of calling this from
		//the outside while a drag is going on.  So don't.
		function set_angle(value,time) {
			if(minAngle>=maxAngle || (value>=minAngle && value<=maxAngle)) {
				send_events(value);
				curTheta = value;
				spins=0;
				//Unfortunately, we now have to work curTheta into the [0,2*PI) interval.
				while(curTheta>=2*Math.PI) {curTheta-=2*Math.PI; spins++;}
				while(curTheta<0) {curTheta+=2*Math.PI; spins--;}
				if(!isActive) {
					inputTheta=curTheta;
					inputSpins=spins;
				}
			} else
			Browser.println('RotationWidget::set_angle: angle '+value+' out of range ['+minAngle+', '+maxAngle+']');
		}

		function send_events(angle) {
			rotation[3] = angle;
			if(inited) {
				angle_changed = angle;
				val_out = ignoreLogical?angle:xlate(minAngle,maxAngle,minVal,maxVal,angle);
				rotation_changed=rotation;
			}
		}

		function val_in(value,time) {
			if(!ignoreLogical && (value<minVal && value<maxVal || value>minVal && value>maxVal))
				Browser.println('RotationWidget::val_in: value '+value+' out of range ['+minVal+', '+maxVal+']');
			else set_angle(ignoreLogical?value:xlate(minVal,maxVal,minAngle,maxAngle,value),time);
		}

		function xlate(x1,x2,y1,y2,x) {return y1+(x-x1)/(x2-x1)*(y2-y1);}

		function set_minAngle(value,time) {
			var oldMin=minAngle;
			minAngle = value;
			if(ignoreLogical) {
				if(minAngle<=maxAngle && currentAngle()<minAngle)	//Need to clamp angle
					set_angle(minAngle,time);
			} else
				set_angle(xlate(oldMin,maxAngle,minAngle,maxAngle,currentAngle()),time);
		}
		function set_maxAngle(value,time) {
			var oldMax=maxAngle;
			maxAngle = value;
			if(ignoreLogical) {
				if(minAngle<=maxAngle && currentAngle()>maxAngle)	//Need to clamp angle
					set_angle(maxAngle,time);
			} else
				set_angle(xlate(minAngle,oldMax,minAngle,maxAngle,currentAngle()),time);
		}

		//There is no 'value' state, and as such these functions are very simple.
		function set_minValue(value,time) {minVal=value;}
		function set_maxValue(value,time) {maxVal=value;}

		function currentAngle() {return currentAngle0(curTheta,spins);}
		function currentAngle0(angle,s) {return angle+s*2*Math.PI;}

		function ts_hitPoint_in(value,time) {			
			
			if(firstHitPoint) {
				Browser.println('first hit point called!');				
				firstHitPoint = false;
				offset_out[0] = value[0];
				offset_out[1] = value[1];
				grabDelta = Math.atan2(value[1], value[0]) - curTheta;
				if(grabDelta<0) grabDelta += Math.PI*2;
				
			}
			
		}

		function ts_active_in(value,time) {
			if(value)
				{
				//Browser.println('First Hit Point TRUE');	//GRANT -- THIS NEEDS TO BE TRUE BY DEFAULT...
				//firstHitPoint = true;
				
				}
			else {
				//Overwrite mouse-tracking data with real data
				//inputSpins=spins;
				//inputTheta=curTheta;
				Browser.println('overwrite: spins: ' + inputSpins + ', theta: ' + inputTheta);
			}
			set_isActive(value,time);
		}

		function set_isActive(value,time) {
			isActive = value;
			if(value) {
				if(activeGeometry.length > 0) whichChoice_changed = 2;
			} else {
				if(isOver && overGeometry.length > 0) whichChoice_changed = 1;
				else whichChoice_changed = 0;
			}
		}

		function set_isOver(value,time) {
			isOver = value;
			if(value) {
				if(!isActive && overGeometry.length > 0) whichChoice_changed = 1;
			} else {
				if(isActive && activeGeometry.length > 0) whichChoice_changed = 2;
				else whichChoice_changed = 0;
			}
		}"
	}

	#GRANT -- CHANGED ORDER OF ROUTES
	ROUTE TS2.isActive TO Worker2.ts_active_in
	ROUTE TS2.hitPoint_changed TO Worker2.ts_hitPoint_in
	ROUTE TS2.isOver TO Worker2.set_isOver
	ROUTE PS2.translation_changed TO Worker2.ps_trans_in
	ROUTE Worker2.rotation_changed TO RotationalTransform.set_rotation
	ROUTE Worker2.offset_out TO PS2.set_offset
	ROUTE Worker2.whichChoice_changed TO GeometrySwitch.whichChoice
}

EXTERNPROTO ConvexLens [
	initializeOnly SFFloat radius
	initializeOnly SFFloat radiusOfCurvature
	initializeOnly SFInt32 resolution
	initializeOnly SFInt32 depthResolution
	inputOnly SFFloat set_radius
	inputOnly SFFloat set_radiusOfCurvature
	inputOnly SFInt32 set_resolution
	inputOnly SFInt32 set_depthResolution
]
"x3dlib/Shapes.x3dv#ConvexLens"

EXTERNPROTO WheelWidget [
	initializeOnly SFFloat value
	inputOnly SFFloat set_value
	outputOnly SFFloat value_changed
	initializeOnly SFFloat minValue
	inputOnly SFFloat set_minValue
	initializeOnly SFFloat maxValue
	inputOnly SFFloat set_maxValue
	initializeOnly SFFloat maxRotations
	inputOnly SFFloat set_maxRotations
	outputOnly SFBool isActive_out
	outputOnly SFBool isOver_out
	inputOnly SFBool set_isActive
	inputOutput SFBool enabled
	inputOutput SFNode material
	inputOutput SFNode activeMaterial
	initializeOnly SFString debugName
	outputOnly SFBool initialized
]
"x3dlib/Widgets.x3dv#WheelWidget"

EXTERNPROTO NavLight[ inputOutput SFFloat ambientIntensity
								 inputOutput SFFloat intensity
								 inputOutput SFColor color
								 inputOutput SFVec3f attenuation
								 inputOutput SFBool headlight
								 inputOutput MFFloat avatarSize
								 inputOutput SFFloat navigationSpeed
								 inputOutput MFString navigationType
								 inputOutput SFFloat visibilityLimit ]
"x3dlib/NavPanel.x3dv#NavLight"

EXTERNPROTO NavigationPanel [
	inputOutput SFBool enabled

	initializeOnly			SFBool visible
	inputOnly		SFBool set_visible
	outputOnly	SFBool visible_changed

	inputOutput MFNode children

	inputOutput SFVec3f center

	initializeOnly		 MFFloat		views
	initializeOnly		 SFInt32		activeView

	initializeOnly		 SFFloat		rotation_speed
	initializeOnly		 SFFloat		translation_speed

	#External (EAI) control of the view
	inputOnly	 SFVec2f		set_angles
	inputOnly	 SFVec2f		set_pan
	inputOnly	 SFFloat		set_zoom
	inputOnly	 MFFloat		set_view
	inputOnly	 SFInt32		set_activeView

	#External (EAI) information on the view
	outputOnly SFBool			isActive_out
	outputOnly SFBool			isOver_out
	outputOnly SFBool			rotation_isOver_out
	outputOnly SFBool			rotation_isActive_out
	outputOnly SFBool			pan_isOver_out
	outputOnly SFBool			pan_isActive_out
	outputOnly SFBool			zoom_isOver_out
	outputOnly SFBool			zoom_isActive_out
	outputOnly SFBool			switch_isOver_out
	outputOnly SFBool			switch_isActive_out
	outputOnly SFVec2f		angles_changed
	outputOnly SFVec2f		pan_changed
	outputOnly SFFloat		zoom_changed

	#activeView_changed events are always sent before the corresponding
	#view_changed events to allow a client to determine the reason for a
	#viewpoint change.
	outputOnly MFFloat		view_changed
	outputOnly SFInt32		activeView_changed ]
"x3dlib/NavPanel.x3dv#NavigationPanel"

PROTO CylinderFrustum [
               		initializeOnly SFFloat radius 1
               		inputOnly SFFloat set_radius
               		initializeOnly SFFloat tiltAngle .5
               		inputOnly SFFloat set_tiltAngle
               		initializeOnly SFBool doTilt FALSE
               		initializeOnly SFFloat planeDistance 5
               		inputOnly SFFloat set_planeDistance
               		initializeOnly SFFloat extraLength 10
               		inputOnly SFFloat set_extraLength
               		initializeOnly SFInt32 resolution 32
               		initializeOnly SFBool endCap TRUE
               		initializeOnly SFBool solid TRUE
               	]
		{
               		DEF IFS IndexedFaceSet {
               			coord DEF Coord Coordinate {}
               			solid IS solid
               			#ccw TRUE
               		}
               		DEF S Script {
               			initializeOnly SFFloat r IS radius
               			inputOnly SFFloat r_in IS set_radius
               			initializeOnly SFFloat theta IS tiltAngle
               			inputOnly SFFloat theta_in IS set_tiltAngle
               			initializeOnly SFBool tilt IS doTilt
               			initializeOnly SFFloat d IS planeDistance
               			inputOnly SFFloat d_in IS set_planeDistance
               			initializeOnly SFFloat eLen IS extraLength
               			inputOnly SFFloat e_in IS set_extraLength
               			initializeOnly SFInt32 res IS resolution
               			initializeOnly SFBool cap IS endCap
               			outputOnly MFVec3f coord_out
               			outputOnly MFInt32 indices_out

               			url	"ecmascript:
               			function initialize() {render();}

               			function r_in(value,time) {r=value; render();}
               			function theta_in(value,time) {theta=value; render();}
               			function d_in(value,time) {d=value; render();}
               			function e_in(value,time) {eLen=value; render();}

               			function render() {
               				//print('render(r,t,d,e): '+r+' '+theta+' '+d+' '+eLen);
               				var i,phi,tiltVec,baseVec,k;
               				if(tilt)
               					tiltVec=new SFVec3f(Math.sin(theta),0,-Math.cos(theta));
               				else
               					tiltVec=new SFVec3f(0,0,-1);
               				for(i=0;i<res;i++) {
               					phi=2*Math.PI*i/(res-1);
               					k=(d+r*Math.sin(theta)*Math.cos(phi))/Math.cos(theta);		//eLen is used later
               					if(tilt) baseVec=new SFVec3f(r*Math.cos(theta)*Math.cos(phi),
               																			 r*Math.sin(phi),
               																			 r*Math.sin(theta)*Math.cos(phi));
               					else baseVec=new SFVec3f(r*Math.cos(phi),r*Math.sin(phi),0);
               					coord_out[i]=baseVec.subtract(tiltVec.multiply(eLen));
               					/*print(*/coord_out[i+res]=baseVec.add(tiltVec.multiply(k))/*)*/;
               					indices_out[5*i]=i;
               					indices_out[5*i+1]=(i+res-1)%res;
               					indices_out[5*i+2]=(i+res-1)%res+res;
               					indices_out[5*i+3]=i+res;
               					indices_out[5*i+4]=-1;
               					indices_out[5*res+i]=i;
               					if(cap)
               						indices_out[5*res+(res+1)+i]=(res-i-1)+res;
               				}
               				indices_out[5*res+res]=-1;
               				if(cap) indices_out[5*res+(res+1)+res]=-1;
               			}"
               		}
               		ROUTE S.coord_out TO Coord.set_point
               		ROUTE S.indices_out TO IFS.set_coordIndex
               	}


######################
#   MAIN VIEWPOINT   #
######################




#DEF MainVP Viewpoint {
#	description "Main View"
#	position -5.1879964 705.2546 950.0354
#	orientation  -0.9999636 -0.00802401 -0.0029008759 0.45269734
#}

#######CHANGES THE SPEED OF NAV MOVEMENT###
#NavigationInfo {
#	speed 50
#}
#####################
# END MAIN VIEWPOINT#
#####################


#################################Group everything for the module together as Circular does so as well##############################

NavLight { navigationType "NONE" }

NavigationInfo {
	type "NONE"
}

DEF NavPanel NavigationPanel {
	
	#For future refrence, this is what each of the values in the view [ ] field correspond to
	#1st - how much to rotate along the x axis
	#2nd - how much to rotate along the y axis
	#3rd - how much to rotate along the z axis (although I couldn't get it to do anything in photoelectric)
	#4th - how far to move along the x axis (how far left or right to move the camera)
	#5th - how far to move along the y axis(how far up or down to move the camera)
	#6th - how far to move along the z axis (how far into or out of the screen to move the camera)

	views[
	-.53 -.5 0 -1.5 -1 -12
	-.17 0 0 0 -1 -11
	-.23 -.5 0 -1.5 -1 -12
	 -.5 0 0 0 -3 -15
	 0 0 0 0 -3 -2
	]

	translation_speed 100

	children[

Group {
	children [
#####################
# BOUNDING BOX      #
#####################
Transform {
	scale 1000 300 1000 
	translation 0 0 -500
	children Inline {
		url			"x3dlib/BoundingBox.x3dv"
		bboxSize 1000 300 1000
		bboxCenter 0 0 -500
	}
}
####################
# END BOUNDING BOX #
####################



####################
#     WIDGETS      #
####################

# The cone draggers for the aperture screen and the wavelength widget
DEF WidgetsSwitch Switch {
	whichChoice 0
	choice Group {
		children [
			#Transform for the wavelength widget
			Transform {
				#translation 0 -30 600 #uncomment to move wavelength widget back to middle of box
				#rotation 1 0 0 1.57  #umcomment to move wavelength widget back to middle of box
				#translation -450 -90 525 #comment to move wavelength widget back to middle of box
				translation -450 -90 25
				scale 75 75 75 
				children DEF wavelengthWidget WheelWidget { value 550 }
			}

			#The right Red2ConeXDragger - Controls the Diamaeter
			Transform {
				translation 0 0 0
				scale 20 20 20			# ADJUST THIS
				#translation -40 0 500
				children DEF rightWidthDragger Red2ConeXDragger {
					coneScale 1.25 1.25 1.25		# AND THIS TO MAKE THE SCALE 0 - 7.5 instead of 0 - 1 !!! (coneScale * scale) =25
			
					minPosition .125 #0
					maxPosition 7.5  #1
					position 3.355   #.5
				}
			}
			

			########################
			# ANGLE DRAGGER WIDGET #
			########################

			Transform {
				rotation 1 0 0 3.14159265
				
				children[
					DEF angleWidget RotationWidget {
					
					minAngle 0
					maxAngle 1.5508157014846802 #Approx .01 Converted
					angle .2914567780729189

					value .2914567780729189
					#minValue 0
					#maxValue 0.01
									
					normalGeometry DEF angleRod Transform{
						rotation 1 0 0 1.5707963268
						

						children Shape {
							appearance Appearance { material Material { diffuseColor 0.9 0.9 0.9 } }

							geometry DEF angleRodGeo CylinderFrustum
								{
								radius 10
								doTilt FALSE
								planeDistance 500   #Will be overwritten promptly
								extraLength 800
								}
							} 
						}		
					
					}

					DEF angleWidget2 RotationWidget {
					
					maxAngle 0
					minAngle -1.5508157014846802 #Approx .01 Converted
					angle -.2914567780729189

					value .2914567780729189
					#minValue 0
					#maxValue 0.01
									
					normalGeometry USE angleRod 		
					}
					
				]
			}
			


			############################
			# END ANGLE DRAGGER WIDGET #
			############################




			#The Screen Z axis dragger--As of now it moves across the whole screen. may need to change in the future. JD
			
			####NOTE:  Everything with my mods beside the comment indicate my modifications. As it is now both of the zdistance 
			#widgets below work.  Still testing to see which one will work the best.  The original is uncommented and the 
			#commented lines with my mods are the modifications that I made. JD
			DEF translateScreenSwitch Switch {
			whichChoice 0
			choice Transform {
				#translation 0 150 300 #my mods
				translation 0 150 0 #had to translate this much to center the z distance widget in the bounding box. JD
	##### AS WITH CIRCULAR THE ROTATION OF THIS WIDGET CAN AFFECT THE DRAG ACTION OF THE WIDGET. GO BACK AND LOOK AT CIRCULAR.X3DV IF NECESSARY#####################
				#rotation 0 1 0 1.57  my mods
				rotation -1 1 1 2.1
				#scale 5 5 5 my mods
				scale 10 10 10
				children [
					DEF ScreenDragger Red2ConeXDragger {
						#coneScale 5 5 5 my mods
						coneScale 2.5 2.5 2.5
						#minPosition -30 my mods
						minPosition 5.15
						#maxPosition 150 my mods
						maxPosition 100 
						position 50
					}
				]
			}

			}#end translateScreenSwitch 
			
		]
	}
}

###################
#   END WIDGETS   #
###################


################
# FRONT SCREEN #
################
DEF hideFrontSwitch Switch{
whichChoice 0
choice Group{
children[

#The front screen
DEF frontScreen Transform {
	#translation -325 0 500 
	translation 0 0 0
	scale 1 1 1
	
	children [
		DEF slit Shape {
			appearance Appearance {
				material Material {
					ambientIntensity 0.2 
					diffuseColor 0.3 0.6 0.9
					specularColor 0 0 0 
					transparency 0.6
				}
			}

			geometry Box {#size 1 300 2
						 size 1000 300 1 }
		}
	]
}

##################
#END FRONT SCREEN#
##################

########
# LENS #
########
DEF scaleLens Transform {
	translation 0 0 0
	scale 1 1 1
			children [
				DirectionalLight {
					direction 0.2 0 -0.5
					intensity				 0.8
				}
				Shape {
					appearance
					Appearance {
						material
						Material {
							ambientIntensity		0.0650877
							diffuseColor		0.0575819 0.0309427 0.29568
							specularColor		 0.797872 0.797872 0.797872
							emissiveColor		 0.239362 0.285461 0.319149
							shininess		 0.755319
							transparency		0.712766
						}
					}
					geometry ConvexLens {
						radius 1
						radiusOfCurvature 6
						resolution 48		#24
						depthResolution 8	#8 
					}
				}
			]
		}
] # end children for switch
} # end group for switch
} # ends switch
############
# END LENS #
############

##################
# DISPLAY SCREENS#
##################

##look at the screenMover Transform in the singleSlit.vrml file and the moveScreen transform in the circular.x3dv file##

DEF moveScreen Transform {
	translation 500 0 500

	children [
		#####The box that is the screen#####
		Shape{
			appearance Appearance {
				material Material { 
					diffuseColor 1 1 0 
					emissiveColor 1 1 0
				}
			}
			geometry IndexedFaceSet {
				coord Coordinate {
					point [
						500 -150 -10,
						-500 -150 -10,
						-500  150 -10,
						500  150 -10,
						500 -150   0,
						-500 -150   0,
						-500  150   0,
						500  150   0,
					]
				}

				coordIndex [
					0, 1, 2, 3, -1, # back
					1, 5, 6, 2, -1, # left
					0, 3, 7, 4, -1, # right
					3, 2, 6, 7, -1, # top
					0, 4, 5, 1, -1, # bottom
				]
			}#end IndexedFaceSet
		}#end Shape

##########The Observation Screen started here in Circular but it was completely independent in the singleSlit.vrml file##########
##########May have to go back and change it once I start connecting to the world via the .java file##############################
		
		#Setup the observation screen
		DEF meshMover Transform {
			

			children [
				DEF ScreenTouch TouchSensor {
					enabled TRUE
				}
						Transform {
							translation 0 150 0
							scale 1 1 .6         
							rotation 1 0 0 1.570796232679
							
							children[
							DEF ResolutionSwitch Switch {
							whichChoice 0
							choice [
							Group {
							
							children [
								DEF HiQuad Shape {
									
									geometry DEF ifsNode IndexedFaceSet {

										coord DEF coordinateNode Coordinate {}
										color DEF colorNode Color {}
										normalPerVertex FALSE
										creaseAngle 3.14159
									}
								}

								#Rotate quad once
								Transform {
									rotation 0 1 0 3.14159
									translation 0 0 500 
									children USE HiQuad
									
								}
							]#end children of Group
						}#end group

							Group {
							
							children [
								DEF LoQuad Shape {
									
									geometry DEF ifsNodeLowRes IndexedFaceSet {

										coord DEF coordinateNodeLowRes Coordinate {}
										color DEF colorNodeLowRes Color {}
										normalPerVertex FALSE
										creaseAngle 3.14159
									}
								}

								#Rotate quad once
								Transform {
									rotation 0 1 0 3.14159
									translation 0 0 500 
									children USE LoQuad
									
								}
							]#end children of Group
						}#end group


						]#end choice
						}#end switch
						]#end switch children
					}#end Transform
					


				#intensity readout line
				Transform {
					translation 0 151 0 #This might not be right --GRANT (0 200 0)
					
					#rotation 0 0 0 0 may not need
					scale 2 70 1 #may not need 
					children [
						DEF HiLine Shape {
							geometry DEF ilsNode IndexedLineSet {
								coord Coordinate {}
							}#end ilsNode
							appearance DEF LineAppearance Appearance {
								material Material {
									emissiveColor 1 1 1
								}
							}
						}#end HiLine
					]#end intensity readout transform children
				}#end intensity readout tansform
			]#end children of Transform for display screen
		} #End Transform for display screen
	]#end children for moveScreen
#end Transform for moveScreen
}

######################
#       SCRIPTS      #
######################

DEF CHANGE_DIAMETER Script {
	inputOnly SFFloat translation_in
	outputOnly SFVec3f scale_out

	url "ecmascript: 
		function initialize() {
			scale_out = new SFVec3f(67.1, 67.1, 1);
		}

		function translation_in(value, time) {
			if(value < 0)
				value = -1*value;
			scale_out[0]=150/7.5 * value;
			scale_out[1]=150/7.5 * value;
		} "

}

DEF AXIS_SWITCHER Script {
	inputOnly SFFloat t_in
	outputOnly SFVec3f t_out

	#screen dragger reports in 0 to 100, we need 0 to 1000
	url "ecmascript: 
		function t_in(value, time){
			t_out[2] = -value*10;
		} "
}

DEF SCREEN_DISTANCE Script {
	inputOnly SFVec3f t_in
	outputOnly SFFloat distance_out

	url "ecmascript: 
		function t_in(value, time){
			distance_out = -1 * value [2];
		} "
}

DEF ANGLE_CONTROL Script {
	inputOnly SFBool angleOneActive 
	inputOnly SFBool angleTwoActive
	
	inputOnly SFFloat angleOneChanged
	inputOnly SFFloat angleTwoChanged
	
	outputOnly SFFloat angleOneOut
	outputOnly SFFloat angleTwoOut

	initializeOnly SFFloat whichActive 0


	url "ecmascript:
		function angleOneActive(value, time)
		{
			whichActive = 1;	
		}
		function angleTwoActive(value,time)
		{
			whichActive = 2;
		}
		function angleOneChanged(value, time)
		{
			if(whichActive == 1)
				angleTwoOut = -1 * value;
	
		}
		function angleTwoChanged(value, time)
		{
			if(whichActive == 2)
				angleOneOut = -1 * value;
				
		}
	"
}


###TESTING THE OPPOSITE MOVEMENTS OF THE DRAGGER##
#DEF OPP_DRAG Script {
#	inputOnly SFFloat drag_in
#	outputOnly SFVec3f drag_out
#
#	#try to make the left and right draggers move opposite of each other
#	url "ecmascript: 
#		function drag_in(value, time){
#			drag_out[0] = -1*drag_in*10;
#			//drag_out[0] = -1 *drag_in[0];
#			//drag_out[1] = -1*drag_in[1];
#			//drag_out[2] = -1*drag_in[2];
#		}"
#}

################
#  END SCRIPTS #
################

]#end overall Group children
#end Overall Group
}
]
#End Nav Panel
}

############################
# SCRIPT ROUTE STATEMENTS  #
############################


ROUTE rightWidthDragger.position_changed TO CHANGE_DIAMETER.translation_in 

##Need to route the movement on the right dragger to make the left dragger move opposite of it
##Need to add a route for the left dragger to make the slits move
##Need to route the movement of the left dragger to make the right dragger move opposite of it

ROUTE CHANGE_DIAMETER.scale_out TO scaleLens.set_scale


ROUTE ScreenDragger.position_changed TO AXIS_SWITCHER.t_in
ROUTE AXIS_SWITCHER.t_out TO moveScreen.set_translation

ROUTE moveScreen.translation_changed TO SCREEN_DISTANCE.t_in
ROUTE SCREEN_DISTANCE.distance_out TO angleRodGeo.set_planeDistance		
ROUTE angleWidget.angle_changed TO angleRodGeo.set_tiltAngle 

ROUTE angleWidget.isActive_out TO ANGLE_CONTROL.angleOneActive 
ROUTE angleWidget2.isActive_out TO ANGLE_CONTROL.angleTwoActive
ROUTE angleWidget.angle_changed TO ANGLE_CONTROL.angleOneChanged
ROUTE angleWidget2.angle_changed TO ANGLE_CONTROL.angleTwoChanged

ROUTE ANGLE_CONTROL.angleOneOut TO angleWidget.set_value
ROUTE ANGLE_CONTROL.angleTwoOut TO angleWidget2.set_value


