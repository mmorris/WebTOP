#VRML V2.0 utf8

# -------------------------------------------------------------------
# PROTOs that are part of Chi's NavigationPanel [v3.01]
# -------------------------------------------------------------------

#A prototype for the viewpoint objects
PROTO NavigationPanel_ViewPointPROTO [ exposedField SFBool enabled TRUE
	field SFInt32 num 0
	eventOut SFInt32 selected
	eventOut SFBool isOver_out
	eventOut SFBool isActive_out ]
{
	DEF T Transform {
		scale 0.1 0.1 0.1
		children [
			DEF TS TouchSensor {
				enabled IS enabled
				isActive IS isActive_out
				isOver IS isOver_out
			}
			Transform {
				rotation 0 1 0 0.4
				children Transform {
					rotation 1 0 0 0.6
					children Transform {
						translation 0 0 0.5
						children [
							Shape {
								appearance Appearance { material Material { diffuseColor 0 0 1 } }
								geometry Sphere { radius 0.1 }
							}
							Transform {
								rotation -0.7071 0.7071 0 -0.5236
								children DEF Rod Transform {
									translation 0 0 -0.5
									rotation 1 0 0 -1.5707963
									children Shape {
										appearance Appearance { material Material { diffuseColor 0.6 0.6 0.6 } }
										geometry Cylinder { radius 0.025 height 1 }
									}
								}
							}
							Transform {
								rotation -0.7071 0.7071 0 0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 -0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 0.5236
								children USE Rod }
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 1 1 0.2
										transparency 0.5
									}
								}
								geometry IndexedFaceSet {
									coord Coordinate {
										point [ 0 0 0, 0.3536 0.3536 -0.866, -0.3536 0.3536 -0.866, -0.3536 -0.3536 -0.866, 0.3536 -0.3536 -0.866 ]
									}
									coordIndex [ 0 1 2 -1, 0 2 3 -1, 0 3 4 -1, 0 4 1 -1 ]
								}
							}
						]
					}
				}
			}
		]
	}
	DEF Worker Script {
		field SFInt32 n IS num
		eventIn SFBool active
		eventOut SFInt32 selected IS selected
		eventOut SFVec3f trans_out
		url "javascript:
		function initialize() {trans_out=new SFVec3f(-.7+n*.1,-0.75,-2);}
		function active(value,time) {if(!value)selected=n;}"
	}
	ROUTE TS.isActive TO Worker.active
	ROUTE Worker.trans_out TO T.set_translation
}

PROTO NavigationPanel [
	exposedField SFBool enabled						 TRUE

	field			SFBool visible							 TRUE
	eventIn		SFBool set_visible
	eventOut	SFBool visible_changed

	exposedField MFNode children					 []

	exposedField SFVec3f center							0 0 0

	field		 MFFloat		views							 [0 0 0 0 0 0]
	field		 SFInt32		activeView				 0

	field		 SFFloat		rotation_speed		 1
	field		 SFFloat		translation_speed	 20

	#External (EAI) control of the view
	eventIn	 SFVec2f		set_angles
	eventIn	 SFVec2f		set_pan
	eventIn	 SFFloat		set_zoom
	eventIn	 MFFloat		set_view
	eventIn	 SFInt32		set_activeView

	#External (EAI) information on the view
	eventOut SFBool			isActive_out
	eventOut SFBool			isOver_out
	eventOut SFBool			rotation_isOver_out
	eventOut SFBool			rotation_isActive_out
	eventOut SFBool			pan_isOver_out
	eventOut SFBool			pan_isActive_out
	eventOut SFBool			zoom_isOver_out
	eventOut SFBool			zoom_isActive_out
	eventOut SFBool			switch_isOver_out
	eventOut SFBool			switch_isActive_out
	eventOut SFVec2f		angles_changed
	eventOut SFVec2f		pan_changed
	eventOut SFFloat		zoom_changed

	#activeView_changed events are always sent before the corresponding
	#view_changed events to allow a client to determine the reason for a
	#viewpoint change.
	eventOut MFFloat		view_changed
	eventOut SFInt32		activeView_changed ]
{
	PROTO RotateIcon [
		field	 SFVec2f	angles 0 0
		field	 SFFloat	speed	 1
		eventIn SFVec2f set_angles ]
	{
		DEF PitchTransform Transform {
			children DEF YawTransform Transform {
				children Shape {
					appearance Appearance {
						texture ImageTexture { url [ "../images/checker.jpg" "checker.jpg" ] }
						material Material { diffuseColor 0.5 0.5 0.5 }
					}
					geometry Sphere { radius 0.5 }
				}
			}
		}

		DEF Worker Script {
			field SFVec2f angles IS angles
			field SFFloat speed IS speed

			eventIn SFVec2f set_angles IS set_angles

			eventOut SFRotation yawRotation_changed
			eventOut SFRotation pitchRotation_changed

			url "javascript:
			function initialize() {
				yawRotation_changed = new SFRotation(0, 1, 0, angles[1]*speed);
				pitchRotation_changed = new SFRotation(1, 0, 0, -angles[0]*speed);}

			function set_angles(value, time) {
				yawRotation_changed[3] = value[1] * speed;
				pitchRotation_changed[3] = -value[0] * speed;}
			"
		}

		ROUTE Worker.yawRotation_changed TO YawTransform.set_rotation
		ROUTE Worker.pitchRotation_changed TO PitchTransform.set_rotation
	}

	PROTO ZoomIcon [ ]
	{
		Transform {
			scale 1 0.5 1
			rotation 1 0 0 -1.0
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	 0.4 0.25 0.1,		0.175 0.25 0.1,		 0.35 -0.5 0.1,	 0.5 -0.5 0.1,
							0 -1 0.1,	 -0.5 -0.5 0.1,	 -0.35 -0.5 0.1,	-0.175 0.25 0.1,	-0.4 0.25 0.1,
							0 1 -0.1,	 0.4 0.25 -0.1,		0.175 0.25 -0.1,	 0.35 -0.5 -0.1, 0.5 -0.5 -0.1,
							0 -1 -0.1, -0.5 -0.5 -0.1, -0.35 -0.5 -0.1, -0.175 0.25 -0.1, -0.4 0.25 -0.1 ]
					}
					coordIndex [
						0 9 1 -1, 8 7 3 2 -1, 4 6 5 -1,
						10 11 19 -1, 18 12 13 17 -1, 16 14 15 -1,
						10 0 1 11 -1, 11 1 2 12 -1, 12 2 3 13 -1, 13 3 4 14 -1, 14 4 5 15 -1,
						0 10 19 9 -1, 9 19 18 8 -1, 8 18 17 7 -1, 7 17 16 6 -1, 6 16 15 5 -1 ]
				}
			}
		}
	}

	PROTO PanIcon [ ]
	{
		Transform {
			scale 0.5 0.5 1
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	0.5 0.6 0.1,	 0.3 0.6 0.1,		0.3 0.3 0.1,		0.6 0.3 0.1,	 0.6 0.5 0.1,
							1 0 0.1,	0.6 -0.5 0.1,	 0.6 -0.3 0.1, 0.3 -0.3 0.1,	 0.3 -0.6 0.1,	0.5 -0.6 0.1,
							0 -1 0.1, -0.5 -0.6 0.1, -0.3 -0.6 0.1,	 -0.3 -0.3, 0.1, -0.6 -0.3 0.1, -0.6 -0.5 0.1,
							-1 0 0.1, -0.6 0.5 0.1,	 -0.6 0.3 0.1,	-0.3 0.3 0.1,		-0.3 0.6 0.1,	 -0.5 0.6 0.1,

							0 1 -0.1,	 0.5 0.6 -0.1,	 0.3 0.6 -0.1,	 0.3 0.3 -0.1,		0.6 0.3 -0.1,		0.6 0.5 -0.1,
							1 0 -0.1,	 0.6 -0.5 -0.1,	 0.6, -0.3 -0.1, 0.3 -0.3 -0.1,		0.3 -0.6 -0.1,	0.5 -0.6 -0.1,
							0 -1 -0.1, -0.5 -0.6 -0.1, -0.3 -0.6 -0.1,	-0.3 -0.3, -0.1, -0.6 -0.3 -0.1, -0.6 -0.5 -0.1,
							-1 0 -0.1, -0.6 0.5 -0.1,	 -0.6 0.3 -0.1,	 -0.3 0.3 -0.1,		-0.3 0.6 -0.1,	-0.5 0.6 -0.1 ]
					}
					coordIndex [
						0 23 1 -1, 2 22 14 10 -1, 6 5 7 -1, 4 3 9 8 -1, 11 13 12 -1, 19 18 17 -1, 21 20 16 15 -1,
						24 25 47 -1, 46 26 34 38 -1, 29 30 31 -1, 27 28 32 33 -1, 35 36 37 -1, 39 33 34 38 -1, 41 42 43 -1, 44 45 39 40 -1,

						24 0 1 25 -1, 25 1 2 26 -1, 26 2 3 27 -1, 27 3 4 28 -1, 28 4 5 29 -1, 29 5 6 30 -1,
						30 6 7 31 -1, 31 7 8 32 -1, 32 8 9 33 -1, 33 9 10 34 -1, 34 10 11 35 -1, 35 11 12 36 -1,
						36 12 13 37 -1, 37 13 14 38 -1, 38 14 15 39 -1, 39 15 16 40 -1, 40 16 17 41 -1, 41 17 18 42 -1,
						42 18 19 43 -1, 43 19 20 44 -1, 44 20 21 45 -1, 45 21 22 46 -1, 46 22 23 47 -1, 47 23 0 24 -1 ]
				}
			}
		}
	}

	PROTO SwitchIcon [ field SFBool on TRUE
										 eventIn SFBool set_on ]
	{
		DEF OnOff Switch {
			whichChoice 0
			choice [
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OnAppearance Appearance {
								material Material { diffuseColor 0.8 0.2 0.2 }
							}
							geometry DEF C1 Cylinder { radius 0.15 height 0.3 }
						}
						Shape {
							appearance USE OnAppearance
							geometry DEF C2 Cylinder { radius 0.25 height 0.2 }
						}
					]
				}
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OffAppearance Appearance {
								material Material { diffuseColor 0.4 0.0 0.0 }
							}
							geometry USE C1
						}
						Shape {
							appearance USE OffAppearance
							geometry USE C2
						}
					]
				}
			]
		}
		DEF Worker Script {
			field SFBool on IS on
			eventIn SFBool set_on IS set_on
			eventOut SFInt32 whichChoice_changed
			url "javascript:
			function initialize() {if(!on) whichChoice_changed = 1;}
			function set_on(value, time) {whichChoice_changed = value ? 0 : 1;}"
		}
		ROUTE Worker.whichChoice_changed TO OnOff.whichChoice
	}
	#END OF INTERIOR PROTOs

	Group {
		children [
			DEF TranslationTransform Transform {
				children DEF VerticalTransform Transform {
					children DEF HorizontalTransform Transform {
						center IS center
						children IS children #This is where the scene goes
					}
				}
			}

			DEF	PanelTransform Transform {
				children [
					DEF PanelSwitch Switch {
						whichChoice 0
						choice DEF PanelGroup Group {
							children [

								#Here shall be inserted (at initialize time) the viewpoint-selection icons.

								Transform {
									scale 0.1 0.1 0.1
									translation 0.15 -0.75 -2
									children [
										DEF RotationTS TouchSensor {
											enabled IS enabled
											isOver	IS rotation_isOver_out
										}
										DEF RotationPS PlaneSensor {
											enabled	 IS enabled
											isActive IS rotation_isActive_out
										}
										DEF RotationIcon RotateIcon { speed IS rotation_speed }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation 0.0 -0.75 -2
									children [
										DEF PanTS TouchSensor {
											enabled IS enabled
											isOver	IS pan_isOver_out
										}
										DEF PanPS PlaneSensor {
											enabled	 IS enabled
											isActive IS pan_isActive_out
										}
										PanIcon { }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation -0.15 -0.75 -2
									children [
										DEF ZoomTS TouchSensor {
											enabled IS enabled
											isOver	IS zoom_isOver_out
										}
										DEF ZoomPS PlaneSensor {
											enabled	 IS enabled
											isActive IS zoom_isActive_out
										}
										ZoomIcon { }
									]
								}
							]
						}
					}

					Transform {
						scale 0.1 0.1 0.1
						translation 0.85 -0.75 -2
						children [
							DEF SwitchTS TouchSensor {
								enabled IS enabled
								isOver IS switch_isOver_out
								isActive IS switch_isActive_out
							}
							DEF SwitchIcon SwitchIcon {
								on IS visible
								set_on IS set_visible
							}
						]
					}
				]
			}

			DEF ProxSensor ProximitySensor {
				size 1e10 1e10 1e10
				ROUTE ProxSensor.orientation_changed TO PanelTransform.set_rotation
				ROUTE ProxSensor.position_changed TO PanelTransform.set_translation
			}

			DEF NPViewpoint Viewpoint { position 0 0 0 }
		]
	}

	# --------------------------------------------------------------- #
	# Script node that processes and transforms all internal/					#
	# external events.																								#
	# --------------------------------------------------------------- #
	DEF Worker Script {
		#views is never changed and holds the pre-defined viewpoints.
		field			MFFloat	 views IS views
		field			SFInt32	 nViews 0					# count of predefined views
		#activeView holds the current view, or -1 if the viewpoint has been
		#modified since last predefined-view selection.
		field			SFInt32	 activeView IS activeView
		field			MFFloat	 currentView [ 0 0 0 0 0 0 ]

		field			SFFloat	 rotation_speed IS rotation_speed
		field			SFFloat	 translation_speed IS translation_speed

		field			SFBool visible IS visible
		eventIn		SFBool set_visible IS set_visible
		eventOut	SFBool visible_out IS visible_changed

		eventIn		SFVec2f	 set_angles IS set_angles
		eventIn		SFVec2f	 set_pan		IS set_pan
		eventIn		SFFloat	 set_zoom		IS set_zoom
		eventIn		MFFloat	 set_view		IS set_view
		eventIn		SFInt32	 set_activeView IS set_activeView

		eventOut	SFBool	 isOver_out			IS isOver_out
		eventOut	SFBool	 isActive_out		IS isActive_out

		eventOut	SFVec2f	 angles_out IS angles_changed
		eventOut	SFVec2f	 pan_out		IS pan_changed
		eventOut	SFFloat	 zoom_out		IS zoom_changed
		eventOut	MFFloat	 view_out		IS view_changed

		eventOut	SFInt32	 activeView_out IS activeView_changed

		#The other parts of NavigationPanel use these events:
		eventIn		SFBool	 isOver_in
		eventIn		SFBool	 isActive_in

		eventIn		SFInt32	 vpActive_in
		eventIn		SFBool	 switchActive_in

		eventIn		SFVec3f		 rotationTrans_in
		eventIn		SFVec3f		 panTrans_in
		eventIn		SFVec3f		 zoomTrans_in

		eventOut	SFRotation horizontalRotation_int
		eventOut	SFRotation verticalRotation_int
		eventOut	SFVec3f		 translation_int

		eventOut	SFVec2f rotationAngles_int
		eventOut	SFVec3f rotationOffset_int
		eventOut	SFVec3f panOffset_int
		eventOut	SFVec3f zoomOffset_int

		#This will be routed to the switch holding the motion controls
		eventOut	SFInt32 whichChoice_int

		#This is used to add the viewpoint objects
		eventOut	MFNode addChildren_int
		field			SFNode This USE Worker
		field			SFNode enabledSource USE RotationTS

		url "javascript:
		function initialize() {
			var i,VPstr='',VPnodes;
			nViews = views.length / 6;
			if(nViews==0) {
				views = new MFFloat(0,0,0,0,0,0);
				nViews = 1;
			}
			if(nViews > 5) nViews=5;
			if(activeView >= nViews) activeView = nViews - 1;
			if(activeView < 0) activeView = 0;

			//Initialize data: set_all_internal assumes
			//zoomOffset_int has been initialized, so:
			zoomOffset_int = new SFVec3f(0, 0, 0);
			set_all_internal(views,activeView*6);

			set_visible(visible,0);

			for(i=0;i<nViews;i++) VPstr+='NavigationPanel_ViewPointPROTO{num '+i+'}';

			VPnodes=Browser.createVrmlFromString(VPstr);

			for(i=0;i<nViews;i++) {
				Browser.addRoute(VPnodes[i],'selected',This,'vpActive_in');
				Browser.addRoute(VPnodes[i],'isOver_out',This,'isOver_in');
				Browser.addRoute(VPnodes[i],'isActive_out',This,'isActive_in');
				Browser.addRoute(enabledSource,'enabled_changed',VPnodes[i],'set_enabled');
			}

			//Add nodes to panel
			addChildren_int=VPnodes;
		}

		function set_visible(value, time) { whichChoice_int = value ? 0 : -1; }

		function set_angles(value, time) {
			rotationOffset_int = new SFVec3f(value[1],value[0]);
			horizontalRotation_int[3] = value[1];
			verticalRotation_int[3] = -value[0];

			currentView[0] = value[0];
			currentView[1] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_pan(value, time) {
			panOffset_int[0] = value[0];
			panOffset_int[1] = value[1];
			translation_int[0] = value[0];
			translation_int[1] = value[1];

			currentView[3] = value[0];
			currentView[4] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_zoom(value, time) {
			zoomOffset_int[1] = value;
			translation_int[2] = value;

			currentView[5] = value;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_view(value,time) {
			activeView_out=activeView=-1;
			set_all_internal(value,0);
		}

		function set_activeView(value,time) {
			if(value>=nViews || value<0) print('NavigationPanel::set_activeView: invalid view');
			else set_all_internal(views,(activeView=value)*6);
		}

		function vpActive_in(value,time) {
			//Only need to bother if changing
			if(activeView!=value) {
				activeView_out=activeView=value;
				set_all_internal(views,value*6);
			}
		}

		function set_all_internal(value,offset,setviewchanged) {
			var i;

			rotationAngles_int=new SFVec2f(value[offset],value[offset+1]);
			rotationOffset_int=new SFVec3f(value[offset+1],value[offset]);
			horizontalRotation_int=new SFRotation(0,1,0,value[offset+1] * rotation_speed);
			verticalRotation_int=new SFRotation(1,0,0,-value[offset] * rotation_speed);

			panOffset_int=new SFVec3f(value[offset+3],value[offset+4]);
			zoomOffset_int[1] = value[offset+5];

			translation_int=panOffset_int.multiply(translation_speed);
			translation_int[2] = value[offset+5] * translation_speed;

			for(i=0; i<6; i++) currentView[i] = value[offset+i];

			angles_out=new SFVec2f(value[offset],value[offset+1]);
			pan_out=new SFVec2f(value[offset+3],value[offset+4]);
			zoom_out=value[offset+5];
			view_out=currentView;
		}

		function rotationTrans_in(value, time) {
			value=new SFVec2f(value[1],value[0]); // swap components/reduce to 2D
			angles_out = value;
			currentView[0] = value[0];
			currentView[1] = value[1];

			rotationAngles_int=value;

			horizontalRotation_int[3] = value[1] * rotation_speed;
			verticalRotation_int[3] = -value[0] * rotation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function panTrans_in(value, time) {
			value=new SFVec2f(value[0],value[1]);		// reduce to 2D
			pan_out=value;
			currentView[3] = value[0];
			currentView[4] = value[1];

			translation_int[0] = value[0] * translation_speed;
			translation_int[1] = value[1] * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function zoomTrans_in(value, time) {
			value=value[1];												// reduce to scalar
			zoom_out = value;
			currentView[5] = value;

			translation_int[2] = value * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function isOver_in(value, time) { isOver_out = value; }
		function isActive_in(value, time) { isActive_out = value; }

		function switchActive_in(value, time) {
			if(!value) {
				visible = !visible;
				visible_out = visible;
				whichChoice_int = visible ? 0 : -1;
			}
		}"
	}

	ROUTE RotationTS.isOver TO Worker.isOver_in
	ROUTE RotationPS.isActive TO Worker.isActive_in
	ROUTE PanTS.isOver TO Worker.isOver_in
	ROUTE PanPS.isActive TO Worker.isActive_in
	ROUTE ZoomTS.isOver TO Worker.isOver_in
	ROUTE ZoomPS.isActive TO Worker.isActive_in

	ROUTE RotationPS.translation_changed TO Worker.rotationTrans_in
	ROUTE PanPS.translation_changed TO Worker.panTrans_in
	ROUTE ZoomPS.translation_changed TO Worker.zoomTrans_in

	ROUTE Worker.rotationOffset_int TO RotationPS.set_offset
	ROUTE Worker.panOffset_int TO PanPS.set_offset
	ROUTE Worker.zoomOffset_int TO ZoomPS.set_offset

	ROUTE Worker.horizontalRotation_int TO HorizontalTransform.set_rotation
	ROUTE Worker.verticalRotation_int TO VerticalTransform.set_rotation
	ROUTE Worker.translation_int TO TranslationTransform.set_translation

	ROUTE Worker.rotationAngles_int TO RotationIcon.set_angles

	ROUTE Worker.addChildren_int TO PanelGroup.addChildren

	ROUTE Worker.whichChoice_int TO PanelSwitch.whichChoice
	ROUTE Worker.visible_out TO SwitchIcon.set_on

	ROUTE SwitchTS.isActive TO Worker.switchActive_in
}
# -------------------------------------------------------------------
# End of NavigationPanel
# -------------------------------------------------------------------


#Proto for augmentation/replacement for headlight/navinfo:
PROTO NavLight [ exposedField SFFloat ambientIntensity 0.1
								exposedField SFFloat intensity 1
								exposedField SFColor color 1 1 1
								exposedField SFVec3f attenuation 1 0 0
								exposedField SFBool headlight FALSE
								exposedField MFFloat avatarSize [ .25 1.6 .75 ]
								exposedField SFFloat navigationSpeed 1
								exposedField MFString navigationType ["WALK" "ANY"]
								exposedField SFFloat visibilityLimit 0 ]
{
	DEF Fixture Transform {
		children [
			PointLight {
				ambientIntensity IS ambientIntensity
				intensity IS intensity
				color IS color
				attenuation IS attenuation
				radius 1e10
				location 0 0 0
			}
			NavigationInfo {
				avatarSize IS avatarSize
				type IS navigationType
				speed IS navigationSpeed
				visibilityLimit IS visibilityLimit
				headlight IS headlight
			}
		]
	}
	DEF PS ProximitySensor { size 1e10 1e10 1e10 }
	ROUTE PS.position_changed TO Fixture.set_translation
	ROUTE PS.orientation_changed TO Fixture.set_rotation
}

EXTERNPROTO RotationWidget [
	field SFFloat angle
	eventIn SFFloat set_angle
	eventOut SFFloat angle_changed
	eventOut SFRotation rotation_changed
	field SFFloat minAngle
	eventIn SFFloat set_minAngle
	field SFFloat maxAngle
	eventIn SFFloat set_maxAngle
	eventOut SFBool isActive_out
	eventOut SFBool isOver_out
	eventIn SFBool set_isActive
	eventIn SFBool set_isOver
	exposedField SFBool enabled
	field MFNode normalGeometry
	field MFNode overGeometry
	field MFNode activeGeometry
	eventOut SFBool initialized
]
"../vrmllib/Widgets.wrl#RotationWidget"
EXTERNPROTO WheelWidget [
	field SFFloat value
	eventIn SFFloat set_value
	eventOut SFFloat value_changed
	field SFFloat minValue
	eventIn SFFloat set_minValue
	field SFFloat maxValue
	eventIn SFFloat set_maxValue
	field SFFloat maxRotations
	eventIn SFFloat set_maxRotations
	eventOut SFBool isActive_out
	eventOut SFBool isOver_out
	eventIn SFBool set_isActive
	exposedField SFBool enabled
	exposedField SFNode material
	exposedField SFNode activeMaterial
	field SFString debugName
	eventOut SFBool initialized
]
"../vrmllib/Widgets.wrl#WheelWidget"

PROTO Shiny_Surface [ field SFVec3f     ss_position 0 0 0
											field SFRotation  ss_rotation 0 1 0 0.785
											field SFFloat     ss_transparency 0.3 ] {
											# field SFFloat     ss_transparency 0.75 ] {
		Transform {
			translation IS ss_position
			rotation IS ss_rotation
			children [
						Shape {
								geometry Box { size 1.5 1.5 0.15 }
								appearance Appearance {
											material Material {
													transparency IS ss_transparency
													ambientIntensity 1
													shininess 1
													diffuseColor 0.8 0.8 0.8
											} # material
								} # appearance
						} # Shape
			]
		} # end Transform
}
PROTO Shiny_Surface2 [ field SFVec3f     ss_position 0 0 0
											field SFRotation  ss_rotation 0 1 0 0.785
											field SFFloat     ss_transparency 0.4 ] {
											# field SFFloat     ss_transparency 0.75 ] {
		Transform {
			translation IS ss_position
			rotation IS ss_rotation
			children [
						Shape {
								geometry Box { size 1 1 0.1 }
								appearance Appearance {
											material Material {
													transparency IS ss_transparency
													ambientIntensity 1
													shininess 1
													diffuseColor 0.6 0.6 0.6
					specularColor 0.6 0.6 0.6
											} # material
								} # appearance
						} # Shape
			]
		} # end Transform
}
###################################


###################################
# Proto: Mirror
# Description This protoype is for the mirror
###################################
PROTO Mirror [ field SFVec3f m_position 0 0 0
							field SFRotation m_rotation 0 0 0 0 ]
{
	Transform {
		translation IS m_position
		rotation IS m_rotation
		scale 1.5 1.5 1.5
		children [
			Shiny_Surface2 {
				ss_position 0 0 0
				ss_rotation 0 0 0 0
				ss_transparency 0
			}

			Transform {
				translation 0 0 0.125
				rotation 1 0 0 1.5707963
				children [
					Shape {
						geometry Cylinder {
							radius 0.5
							height 0.1
							bottom TRUE
							top TRUE
							side TRUE
						}
						appearance Appearance {
							material Material {
								ambientIntensity 0.4
								diffuseColor 0.6 0.6 0.6
								specularColor 0.4 0.4 0.4
							}
						}
					} # Shape
					SpotLight {
						location 0 5 0
						direction 0 -7.5 0
						beamWidth 5
					}
				]
			}
		]
	}
}
###################################

NavLight { navigationType "NONE" }

DEF NavPanel NavigationPanel {
	views [  0     0      0  -0.0367 -0.4663 -10
					-0.253 0.0361 0,  0.807   0.1486 -10.666
					-0.182 0.4366 0,  0       0      -10 ]

	translation_speed 2
	children [

		# Introduction: the Loading...Please Wait message
		DEF IntroductionToggle Switch {
			whichChoice 0
			choice [
				# choice 0 --------------------------------------

				Billboard {
					axisOfRotation 0 0 0    # Screen-aligned
					children [
						Transform {
							translation 0 1 -3
							children Shape {
								appearance Appearance {
									material Material {
										diffuseColor 1 0 0
										ambientIntensity 0
										#	emissiveColor 0 0 0
									}
								}
								geometry Text {
									string [ "Loading ... Please Wait" ]
									fontStyle FontStyle {
										size 3
										family "SERIF"
										style "ITALIC"
										justify "MIDDLE"
									}
								}
							}
						}
					]
				}
			]
		}

		############################################################################
		# Transform A-----+
		#                 +---Screen A
		#                 +---Transform B---+
		#                 |                 *---Line A
		#                 +---Transform C-----+
		#                                     *---Screen B
		# Transfrom D-----+
		#                 *---TranslateDragger A
		# +---Beam Splitter (ShinySurface Proto)
		# +---Compensation Plate (ShinySurface Proto)
		# +---Mirror A (Movable) (Mirror Proto)
		# *---Mirror B (Tiltable) (Mirror Proto)
		#
		############################################################################

		##################################
		# Transform A                    #
		##################################
		DEF ScreenHolder Transform {
			translation 0 0 -20
			#rotation 1 0 0 -3.14159265
			scale 0.5 0.5 0.5
			children [
				DEF TS TouchSensor {}
				##################################
				# IndexedFaceSet for Screen      #
				##################################
				DEF TopHalf Shape { # Screen A
					geometry DEF ifsNode IndexedFaceSet {
						coord DEF ifs_coordinateNode Coordinate { point [ ] }
						color DEF ifs_colorNode Color { color [ 1 1 1 ] }
						colorPerVertex TRUE
						coordIndex []
						solid FALSE
					}
				}
				#Bottom is always same as top
				Transform {
					rotation 1 0 0 3.1415926535
					children USE TopHalf
				}

				##################################
				# Transform B                    #
				##################################
				Transform { # Transform B
					#translation 0 -5.25 0
					translation 0 15.75 0
					scale 1 6 1
					#rotation 1 0 0 3.14159265
					children [
						DEF LINE_SET_TRANSFORM Transform {
							children [
								##################################
								# IndexedLineSet for Line        #
								##################################
								Shape { # Line A
									geometry DEF ilsNode IndexedLineSet {
										coord DEF ils_coordinateNode Coordinate { point [ 5 0 0 ] }
										colorPerVertex FALSE
										coordIndex [ 1 ]
									} # geometry
									appearance Appearance {
										material Material {
											emissiveColor 1 1 1
											diffuseColor  1 1 1
											specularColor 1 1 1
										} # material
									} # appearance
								} # end Shape(Line A)
								##################################
							]
						} # end of LINE_SET_TRANSFORM
					]
				} # end Transform (Transform B)

				##################################
				# Transform C                    #
				##################################
				Transform { # Transform C
					translation 0 0 -0.78
					children [

						##################################
						# Box for Screen                 #
						##################################
						Shape { # Screen B
							geometry Box {
								size 29.25 29.25 0.75
							} # end geometry
							appearance Appearance {
								material Material {
									diffuseColor  0.4 0.4 0.4
									specularColor 0.4 0.4 0.4
									#ambientColor  0.4 0.4 0.4
								} # material
							} # appearance
						} # end Shape(Screen B)
						##################################
					]
				} # end of Transform C

				#Axis and associated labels
				Transform { # Transform Z
					translation 0 0 0.05
					children [

						##################################
						# Axis for Screen                #
						##################################
						DEF AxisToggle Switch {
							choice [
								Group {
									children [
										Shape { # Axis
											geometry IndexedLineSet {
												coord Coordinate { point [ -15 0 0, 15 0 0, 0 15 0, 0 -15 0,
														-15 0.75 0, -15 -0.75 0, 15 0.75 0, 15 -0.75 0
														-12 0.75 0, -12 -0.75 0, 12 0.75 0, 12 -0.75 0
														-9 0.75 0, -9 -0.75 0, 9 0.75 0, 9 -0.75 0
														-6 0.75 0, -6 -0.75 0, 6 0.75 0, 6 -0.75 0
														-3 0.75 0, -3 -0.75 0, 3 0.75 0, 3 -0.75 0
													] }
												colorPerVertex FALSE
												coordIndex [ 0 1 -1  # Horizontal Axis
													2 3 -1             # Vertical Axis
													4 5 -1 6 7 -1      # tick 15
													8 9 -1 10 11 -1    # tick 12
													12 13 -1 14 15 -1  # tick 9
													16 17 -1 18 19 -1  # tick 6
													20 21 -1 22 23 -1  # tick 3
												]
											} # geometry
											appearance Appearance {
												material Material {
													emissiveColor 1 1 1
													diffuseColor  1 1 1
													specularColor 1 1 1
												} # material
											} # appearance
										} # end Shape(Line A)
										Transform {
											#translation 4.5 1 0
											#rotation 1 0 0 3.14159265
											translation 13.5 -3 0
											scale 3 3 3
											children [
												Shape {
													geometry Text {
														string "15cm"
													}
													appearance Appearance {
														material Material {
															emissiveColor 1 1 1
															diffuseColor  1 1 1
															specularColor 1 1 1
														}
													}
												}
											]
										} # Transform

										Transform {
											#translation -6.5 1 0
											#rotation 1 0 0 3.14159265
											translation -19.5 -3 0
											scale 3 3 3
											children [
												Shape {
													geometry Text {
														string "-15cm"
													}
													appearance Appearance {
														material Material {
															emissiveColor 1 1 1
															diffuseColor  1 1 1
															specularColor 1 1 1
														}
													}
												}
											]
										} # Shape
									]
								} # Transform
							]
							whichChoice 0
						}

						##################################
					]
				} # end of Transform Z
			]
		} # end Transform (Transform A)

		##################################
		# Floor                          #
		##################################
		Transform {
			translation -2.5 -2.5 6.75
			children [
				Shape {
					geometry Box {
						size 7.5 0.125 7.25
					}
					appearance Appearance {
						material Material {
							emissiveColor  0.1 0.4 0.4
						} # material
					} # appearance
				}
			]
		}

		##################################
		# Beam Splitter                  #
		##################################
		Shiny_Surface {
			ss_position 0 -1.75 5
		}
		##################################

		##################################
		# Compensation Plate             #
		##################################
		Shiny_Surface {
			ss_position -2.5 -1.75 5
		}
		##################################

		##################################
		# Movable Mirror                 #
		##################################
		Mirror {
			m_position 0 -1.75 10
			m_rotation 0 1 0 -3.1415926
		}

		##################################
		# Tiltable Mirror                #
		##################################
		Mirror {
			m_position -5 -1.75 5
			m_rotation 0 1 0 1.5707963
		}
		DEF PathDiffWheelToggle Switch {
			choice [
				Transform {
					translation 0 -1.75 10.15
					#This wheel decreases with clockwise spins.
					rotation 1 0 0 -1.5707963267948966
					scale 0.8 0.8 0.8
					children DEF PathDiffWheel WheelWidget {
						value 0.005
						minValue -0.02
						maxValue 0.02
						maxRotations 40
					}
				}
			]
			whichChoice 0
		} # Widget 1 Switch
		##################################


		################################
		# Wheel (Mirror A Widget)      #
		################################
		DEF PhiWheelToggle Switch {
			whichChoice -1
			choice [
				Transform {
					translation -5 -1.25 5
					#This is ancient; who knows what rotation it needs.
					#rotation 1 0 0 3.14159265
					scale 0.5 0.5 0.5
					children
					DEF PhiWheel WheelWidget {
						value 0
						maxValue 1
						minValue -1
						maxRotations 4
					}
				}
			]
		}
		################################

		################################
		# Wheel (Wavelength Widget)    #
		################################
		DEF WavelengthWheelToggle Switch {
			choice [
				Transform {
					translation 5 -2.5 5
					rotation 1 0 0 1.5707963
					scale 0.8 0.8 0.8
					children
					DEF WavelengthWheel WheelWidget {
						value 550
						maxValue 700
						minValue 400
					}
				}
			]
			whichChoice 0
		} # widget 3 switch
		################################


		Transform {
			translation 3 -2.25 5
			#           rotation 0 1 0  1.5707963

			scale  .0075 .0125 .0125
			children [
				Inline {
					url "../vrmllib/Wave.wrl"
					# bboxSize 3 3.00009 14
					# bboxCenter 0 2.5034e-05 -4
				}
			]
		}

#		DEF SCALE_TRANSLATE_SENSOR Script {
#			eventIn  SFVec3f translation_in
#			eventOut SFVec3f screen_translation_out
#			eventOut SFVec3f screen_mesh_translation_out

#			url "vrmlscript:
#			function initialize()
#			{
#				screen_translation_out      = new SFVec3f(0, 0, -1);
#				screen_mesh_translation_out = new SFVec3f(.5, .5, .5);
#			}

#			function translation_in(value, time)
#			{
#				zCurrent = .5*value[0] ;

#				screen_translation_out[2] = zCurrent;
#				screen_mesh_translation_out[1] = 150;
#				screen_mesh_translation_out[2] = zCurrent;
#			}"
#		}

#		DEF RESIZE_SENSOR Script {
#			eventIn  SFVec3f translation_in
#			eventOut SFVec3f screen_translation_out
#			eventOut SFVec3f screen_mesh_translation_out

#			url "vrmlscript:
#			function initialize()
#			{
#				screen_translation_out      = new SFVec3f(0, 0, -1);
#				screen_mesh_translation_out = new SFVec3f(.5, .5, .5);
#			}

#			function translation_in(value, time)
#			{
#				zCurrent = value[0]/2.825;

#				screen_translation_out[1] = zCurrent;
#				screen_mesh_translation_out[1] = 150;
#				screen_mesh_translation_out[2] = zCurrent;
#			}"
#		}

		DEF PhiTrackToggle Switch {
			whichChoice 0
			choice Transform {
				translation -5 -2.125 5
				rotation -1 1 1 2.1
				children [
					DEF PhiTrackWidget RotationWidget {
						minAngle 0.5235987756
						maxAngle 2.617993878
						angle 1.5707963268
						normalGeometry Transform {
							translation 2 0 0
							children Shape {
								appearance Appearance {
									material Material {
										diffuseColor 0 0 0
										specularColor .682 .431 .455
										emissiveColor .424 .173 .18
										ambientIntensity 0
										shininess .055
									}
								}
								geometry Sphere { radius .2 }
							}
						}
						activeGeometry Transform {
							translation 2 0 0
							children Shape {
								appearance Appearance {
									material Material {
										diffuseColor 0 0 0
										specularColor .902 .902 .902
										emissiveColor 1 0 0
										ambientIntensity 0
										shininess .031
									}
								}
								geometry Sphere {
									radius .2
								}
							}
						}
					}
					Shape {
						appearance Appearance {
							material Material {
								diffuseColor .02 .5 .12
								specularColor .76 .76 .76
								emissiveColor 0 .16 0
								ambientIntensity 0
								shininess .15
								transparency .31
							}
						}
						geometry DEF PhiBallTrack Extrusion {
							scale .07 .07
						}
					}
				]
			}
		}
		DEF PBTScript Script {
			field SFFloat arcStart 0.5235987756
			field SFFloat arcEnd 2.617993878
			field SFFloat radius 2
			field SFInt32 res 12

			eventOut MFVec3f spine_out
			url "javascript:
				function initialize() {
					var i,theta;
					for(i=0;i<=res;i++) {
						theta=arcStart+(arcEnd-arcStart)*i/res;
						spine_out[i].x=-Math.cos(theta)*radius;
						spine_out[i].y=Math.sin(theta)*radius;
					}
				}"
		}
	]
}

ROUTE PBTScript.spine_out TO PhiBallTrack.set_spine
