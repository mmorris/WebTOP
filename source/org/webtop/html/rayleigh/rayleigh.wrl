#VRML V2.0 utf8

# -------------------------------------------------------------------
# PROTOs that are part of Chi's NavigationPanel [v3.01]
# -------------------------------------------------------------------

#A prototype for the viewpoint objects
PROTO NavigationPanel_ViewPointPROTO [ exposedField SFBool enabled TRUE
	field SFInt32 num 0
	eventOut SFInt32 selected
	eventOut SFBool isOver_out
	eventOut SFBool isActive_out ]
{
	DEF T Transform {
		scale 0.1 0.1 0.1
		children [
			DEF TS TouchSensor {
				enabled IS enabled
				isActive IS isActive_out
				isOver IS isOver_out
			}
			Transform {
				rotation 0 1 0 0.4
				children Transform {
					rotation 1 0 0 0.6
					children Transform {
						translation 0 0 0.5
						children [
							Shape {
								appearance Appearance { material Material { diffuseColor 0 0 1 } }
								geometry Sphere { radius 0.1 }
							}
							Transform {
								rotation -0.7071 0.7071 0 -0.5236
								children DEF Rod Transform {
									translation 0 0 -0.5
									rotation 1 0 0 -1.5707963
									children Shape {
										appearance Appearance { material Material { diffuseColor 0.6 0.6 0.6 } }
										geometry Cylinder { radius 0.025 height 1 }
									}
								}
							}
							Transform {
								rotation -0.7071 0.7071 0 0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 -0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 0.5236
								children USE Rod }
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 1 1 0.2
										transparency 0.5
									}
								}
								geometry IndexedFaceSet {
									coord Coordinate {
										point [ 0 0 0, 0.3536 0.3536 -0.866, -0.3536 0.3536 -0.866, -0.3536 -0.3536 -0.866, 0.3536 -0.3536 -0.866 ]
									}
									coordIndex [ 0 1 2 -1, 0 2 3 -1, 0 3 4 -1, 0 4 1 -1 ]
								}
							}
						]
					}
				}
			}
		]
	}
	DEF Worker Script {
		field SFInt32 n IS num
		eventIn SFBool active
		eventOut SFInt32 selected IS selected
		eventOut SFVec3f trans_out
		url "javascript:
		function initialize() {trans_out=new SFVec3f(-.7+n*.1,-0.75,-2);}
		function active(value,time) {if(!value)selected=n;}"
	}
	ROUTE TS.isActive TO Worker.active
	ROUTE Worker.trans_out TO T.set_translation
}

PROTO NavigationPanel [
	exposedField SFBool enabled						 TRUE

	field			SFBool visible							 TRUE
	eventIn		SFBool set_visible
	eventOut	SFBool visible_changed

	exposedField MFNode children					 []

	exposedField SFVec3f center							0 0 0

	field		 MFFloat		views							 [0 0 0 0 0 0]
	field		 SFInt32		activeView				 0

	field		 SFFloat		rotation_speed		 1
	field		 SFFloat		translation_speed	 20

	#External (EAI) control of the view
	eventIn	 SFVec2f		set_angles
	eventIn	 SFVec2f		set_pan
	eventIn	 SFFloat		set_zoom
	eventIn	 MFFloat		set_view
	eventIn	 SFInt32		set_activeView

	#External (EAI) information on the view
	eventOut SFBool			isActive_out
	eventOut SFBool			isOver_out
	eventOut SFBool			rotation_isOver_out
	eventOut SFBool			rotation_isActive_out
	eventOut SFBool			pan_isOver_out
	eventOut SFBool			pan_isActive_out
	eventOut SFBool			zoom_isOver_out
	eventOut SFBool			zoom_isActive_out
	eventOut SFBool			switch_isOver_out
	eventOut SFBool			switch_isActive_out
	eventOut SFVec2f		angles_changed
	eventOut SFVec2f		pan_changed
	eventOut SFFloat		zoom_changed

	#activeView_changed events are always sent before the corresponding
	#view_changed events to allow a client to determine the reason for a
	#viewpoint change.
	eventOut MFFloat		view_changed
	eventOut SFInt32		activeView_changed ]
{
	PROTO RotateIcon [
		field	 SFVec2f	angles 0 0
		field	 SFFloat	speed	 1
		eventIn SFVec2f set_angles ]
	{
		DEF PitchTransform Transform {
			children DEF YawTransform Transform {
				children Shape {
					appearance Appearance {
						texture ImageTexture { url [ "../images/checker.jpg" "checker.jpg" ] }
						material Material { diffuseColor 0.5 0.5 0.5 }
					}
					geometry Sphere { radius 0.5 }
				}
			}
		}

		DEF Worker Script {
			field SFVec2f angles IS angles
			field SFFloat speed IS speed

			eventIn SFVec2f set_angles IS set_angles

			eventOut SFRotation yawRotation_changed
			eventOut SFRotation pitchRotation_changed

			url "javascript:
			function initialize() {
				yawRotation_changed = new SFRotation(0, 1, 0, angles[1]*speed);
				pitchRotation_changed = new SFRotation(1, 0, 0, -angles[0]*speed);}

			function set_angles(value, time) {
				yawRotation_changed[3] = value[1] * speed;
				pitchRotation_changed[3] = -value[0] * speed;}
			"
		}

		ROUTE Worker.yawRotation_changed TO YawTransform.set_rotation
		ROUTE Worker.pitchRotation_changed TO PitchTransform.set_rotation
	}

	PROTO ZoomIcon [ ]
	{
		Transform {
			scale 1 0.5 1
			rotation 1 0 0 -1.0
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	 0.4 0.25 0.1,		0.175 0.25 0.1,		 0.35 -0.5 0.1,	 0.5 -0.5 0.1,
							0 -1 0.1,	 -0.5 -0.5 0.1,	 -0.35 -0.5 0.1,	-0.175 0.25 0.1,	-0.4 0.25 0.1,
							0 1 -0.1,	 0.4 0.25 -0.1,		0.175 0.25 -0.1,	 0.35 -0.5 -0.1, 0.5 -0.5 -0.1,
							0 -1 -0.1, -0.5 -0.5 -0.1, -0.35 -0.5 -0.1, -0.175 0.25 -0.1, -0.4 0.25 -0.1 ]
					}
					coordIndex [
						0 9 1 -1, 8 7 3 2 -1, 4 6 5 -1,
						10 11 19 -1, 18 12 13 17 -1, 16 14 15 -1,
						10 0 1 11 -1, 11 1 2 12 -1, 12 2 3 13 -1, 13 3 4 14 -1, 14 4 5 15 -1,
						0 10 19 9 -1, 9 19 18 8 -1, 8 18 17 7 -1, 7 17 16 6 -1, 6 16 15 5 -1 ]
				}
			}
		}
	}

	PROTO PanIcon [ ]
	{
		Transform {
			scale 0.5 0.5 1
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	0.5 0.6 0.1,	 0.3 0.6 0.1,		0.3 0.3 0.1,		0.6 0.3 0.1,	 0.6 0.5 0.1,
							1 0 0.1,	0.6 -0.5 0.1,	 0.6 -0.3 0.1, 0.3 -0.3 0.1,	 0.3 -0.6 0.1,	0.5 -0.6 0.1,
							0 -1 0.1, -0.5 -0.6 0.1, -0.3 -0.6 0.1,	 -0.3 -0.3, 0.1, -0.6 -0.3 0.1, -0.6 -0.5 0.1,
							-1 0 0.1, -0.6 0.5 0.1,	 -0.6 0.3 0.1,	-0.3 0.3 0.1,		-0.3 0.6 0.1,	 -0.5 0.6 0.1,

							0 1 -0.1,	 0.5 0.6 -0.1,	 0.3 0.6 -0.1,	 0.3 0.3 -0.1,		0.6 0.3 -0.1,		0.6 0.5 -0.1,
							1 0 -0.1,	 0.6 -0.5 -0.1,	 0.6, -0.3 -0.1, 0.3 -0.3 -0.1,		0.3 -0.6 -0.1,	0.5 -0.6 -0.1,
							0 -1 -0.1, -0.5 -0.6 -0.1, -0.3 -0.6 -0.1,	-0.3 -0.3, -0.1, -0.6 -0.3 -0.1, -0.6 -0.5 -0.1,
							-1 0 -0.1, -0.6 0.5 -0.1,	 -0.6 0.3 -0.1,	 -0.3 0.3 -0.1,		-0.3 0.6 -0.1,	-0.5 0.6 -0.1 ]
					}
					coordIndex [
						0 23 1 -1, 2 22 14 10 -1, 6 5 7 -1, 4 3 9 8 -1, 11 13 12 -1, 19 18 17 -1, 21 20 16 15 -1,
						24 25 47 -1, 46 26 34 38 -1, 29 30 31 -1, 27 28 32 33 -1, 35 36 37 -1, 39 33 34 38 -1, 41 42 43 -1, 44 45 39 40 -1,

						24 0 1 25 -1, 25 1 2 26 -1, 26 2 3 27 -1, 27 3 4 28 -1, 28 4 5 29 -1, 29 5 6 30 -1,
						30 6 7 31 -1, 31 7 8 32 -1, 32 8 9 33 -1, 33 9 10 34 -1, 34 10 11 35 -1, 35 11 12 36 -1,
						36 12 13 37 -1, 37 13 14 38 -1, 38 14 15 39 -1, 39 15 16 40 -1, 40 16 17 41 -1, 41 17 18 42 -1,
						42 18 19 43 -1, 43 19 20 44 -1, 44 20 21 45 -1, 45 21 22 46 -1, 46 22 23 47 -1, 47 23 0 24 -1 ]
				}
			}
		}
	}

	PROTO SwitchIcon [ field SFBool on TRUE
										 eventIn SFBool set_on ]
	{
		DEF OnOff Switch {
			whichChoice 0
			choice [
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OnAppearance Appearance {
								material Material { diffuseColor 0.8 0.2 0.2 }
							}
							geometry DEF C1 Cylinder { radius 0.15 height 0.3 }
						}
						Shape {
							appearance USE OnAppearance
							geometry DEF C2 Cylinder { radius 0.25 height 0.2 }
						}
					]
				}
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OffAppearance Appearance {
								material Material { diffuseColor 0.4 0.0 0.0 }
							}
							geometry USE C1
						}
						Shape {
							appearance USE OffAppearance
							geometry USE C2
						}
					]
				}
			]
		}
		DEF Worker Script {
			field SFBool on IS on
			eventIn SFBool set_on IS set_on
			eventOut SFInt32 whichChoice_changed
			url "javascript:
			function initialize() {if(!on) whichChoice_changed = 1;}
			function set_on(value, time) {whichChoice_changed = value ? 0 : 1;}"
		}
		ROUTE Worker.whichChoice_changed TO OnOff.whichChoice
	}
	#END OF INTERIOR PROTOs

	Group {
		children [
			DEF TranslationTransform Transform {
				children DEF VerticalTransform Transform {
					children DEF HorizontalTransform Transform {
						center IS center
						children IS children #This is where the scene goes
					}
				}
			}

			DEF	PanelTransform Transform {
				children [
					DEF PanelSwitch Switch {
						whichChoice 0
						choice DEF PanelGroup Group {
							children [

								#Here shall be inserted (at initialize time) the viewpoint-selection icons.

								Transform {
									scale 0.1 0.1 0.1
									translation 0.15 -0.75 -2
									children [
										DEF RotationTS TouchSensor {
											enabled IS enabled
											isOver	IS rotation_isOver_out
										}
										DEF RotationPS PlaneSensor {
											enabled	 IS enabled
											isActive IS rotation_isActive_out
										}
										DEF RotationIcon RotateIcon { speed IS rotation_speed }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation 0.0 -0.75 -2
									children [
										DEF PanTS TouchSensor {
											enabled IS enabled
											isOver	IS pan_isOver_out
										}
										DEF PanPS PlaneSensor {
											enabled	 IS enabled
											isActive IS pan_isActive_out
										}
										PanIcon { }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation -0.15 -0.75 -2
									children [
										DEF ZoomTS TouchSensor {
											enabled IS enabled
											isOver	IS zoom_isOver_out
										}
										DEF ZoomPS PlaneSensor {
											enabled	 IS enabled
											isActive IS zoom_isActive_out
										}
										ZoomIcon { }
									]
								}
							]
						}
					}

					Transform {
						scale 0.1 0.1 0.1
						translation 0.85 -0.75 -2
						children [
							DEF SwitchTS TouchSensor {
								enabled IS enabled
								isOver IS switch_isOver_out
								isActive IS switch_isActive_out
							}
							DEF SwitchIcon SwitchIcon {
								on IS visible
								set_on IS set_visible
							}
						]
					}
				]
			}

			DEF ProxSensor ProximitySensor {
				size 1e10 1e10 1e10
				ROUTE ProxSensor.orientation_changed TO PanelTransform.set_rotation
				ROUTE ProxSensor.position_changed TO PanelTransform.set_translation
			}

			DEF NPViewpoint Viewpoint { position 0 0 0 }
		]
	}

	# --------------------------------------------------------------- #
	# Script node that processes and transforms all internal/					#
	# external events.																								#
	# --------------------------------------------------------------- #
	DEF Worker Script {
		#views is never changed and holds the pre-defined viewpoints.
		field			MFFloat	 views IS views
		field			SFInt32	 nViews 0					# count of predefined views
		#activeView holds the current view, or -1 if the viewpoint has been
		#modified since last predefined-view selection.
		field			SFInt32	 activeView IS activeView
		field			MFFloat	 currentView [ 0 0 0 0 0 0 ]

		field			SFFloat	 rotation_speed IS rotation_speed
		field			SFFloat	 translation_speed IS translation_speed

		field			SFBool visible IS visible
		eventIn		SFBool set_visible IS set_visible
		eventOut	SFBool visible_out IS visible_changed

		eventIn		SFVec2f	 set_angles IS set_angles
		eventIn		SFVec2f	 set_pan		IS set_pan
		eventIn		SFFloat	 set_zoom		IS set_zoom
		eventIn		MFFloat	 set_view		IS set_view
		eventIn		SFInt32	 set_activeView IS set_activeView

		eventOut	SFBool	 isOver_out			IS isOver_out
		eventOut	SFBool	 isActive_out		IS isActive_out

		eventOut	SFVec2f	 angles_out IS angles_changed
		eventOut	SFVec2f	 pan_out		IS pan_changed
		eventOut	SFFloat	 zoom_out		IS zoom_changed
		eventOut	MFFloat	 view_out		IS view_changed

		eventOut	SFInt32	 activeView_out IS activeView_changed

		#The other parts of NavigationPanel use these events:
		eventIn		SFBool	 isOver_in
		eventIn		SFBool	 isActive_in

		eventIn		SFInt32	 vpActive_in
		eventIn		SFBool	 switchActive_in

		eventIn		SFVec3f		 rotationTrans_in
		eventIn		SFVec3f		 panTrans_in
		eventIn		SFVec3f		 zoomTrans_in

		eventOut	SFRotation horizontalRotation_int
		eventOut	SFRotation verticalRotation_int
		eventOut	SFVec3f		 translation_int

		eventOut	SFVec2f rotationAngles_int
		eventOut	SFVec3f rotationOffset_int
		eventOut	SFVec3f panOffset_int
		eventOut	SFVec3f zoomOffset_int

		#This will be routed to the switch holding the motion controls
		eventOut	SFInt32 whichChoice_int

		#This is used to add the viewpoint objects
		eventOut	MFNode addChildren_int
		field			SFNode This USE Worker
		field			SFNode enabledSource USE RotationTS

		url "javascript:
		function initialize() {
			var i,VPstr='',VPnodes;
			nViews = views.length / 6;
			if(nViews==0) {
				views = new MFFloat(0,0,0,0,0,0);
				nViews = 1;
			}
			if(nViews > 5) nViews=5;
			if(activeView >= nViews) activeView = nViews - 1;
			if(activeView < 0) activeView = 0;

			//Initialize data: set_all_internal assumes
			//zoomOffset_int has been initialized, so:
			zoomOffset_int = new SFVec3f(0, 0, 0);
			set_all_internal(views,activeView*6);

			set_visible(visible,0);

			for(i=0;i<nViews;i++) VPstr+='NavigationPanel_ViewPointPROTO{num '+i+'}';

			VPnodes=Browser.createVrmlFromString(VPstr);

			for(i=0;i<nViews;i++) {
				Browser.addRoute(VPnodes[i],'selected',This,'vpActive_in');
				Browser.addRoute(VPnodes[i],'isOver_out',This,'isOver_in');
				Browser.addRoute(VPnodes[i],'isActive_out',This,'isActive_in');
				Browser.addRoute(enabledSource,'enabled_changed',VPnodes[i],'set_enabled');
			}

			//Add nodes to panel
			addChildren_int=VPnodes;
		}

		function set_visible(value, time) { whichChoice_int = value ? 0 : -1; }

		function set_angles(value, time) {
			rotationOffset_int = new SFVec3f(value[1],value[0]);
			horizontalRotation_int[3] = value[1];
			verticalRotation_int[3] = -value[0];

			currentView[0] = value[0];
			currentView[1] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_pan(value, time) {
			panOffset_int[0] = value[0];
			panOffset_int[1] = value[1];
			translation_int[0] = value[0];
			translation_int[1] = value[1];

			currentView[3] = value[0];
			currentView[4] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_zoom(value, time) {
			zoomOffset_int[1] = value;
			translation_int[2] = value;

			currentView[5] = value;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_view(value,time) {
			activeView_out=activeView=-1;
			set_all_internal(value,0);
		}

		function set_activeView(value,time) {
			if(value>=nViews || value<0) print('NavigationPanel::set_activeView: invalid view');
			else set_all_internal(views,(activeView=value)*6);
		}

		function vpActive_in(value,time) {
			//Only need to bother if changing
			if(activeView!=value) {
				activeView_out=activeView=value;
				set_all_internal(views,value*6);
			}
		}

		function set_all_internal(value,offset,setviewchanged) {
			var i;

			rotationAngles_int=new SFVec2f(value[offset],value[offset+1]);
			rotationOffset_int=new SFVec3f(value[offset+1],value[offset]);
			horizontalRotation_int=new SFRotation(0,1,0,value[offset+1] * rotation_speed);
			verticalRotation_int=new SFRotation(1,0,0,-value[offset] * rotation_speed);

			panOffset_int=new SFVec3f(value[offset+3],value[offset+4]);
			zoomOffset_int[1] = value[offset+5];

			translation_int=panOffset_int.multiply(translation_speed);
			translation_int[2] = value[offset+5] * translation_speed;

			for(i=0; i<6; i++) currentView[i] = value[offset+i];

			angles_out=new SFVec2f(value[offset],value[offset+1]);
			pan_out=new SFVec2f(value[offset+3],value[offset+4]);
			zoom_out=value[offset+5];
			view_out=currentView;
		}

		function rotationTrans_in(value, time) {
			value=new SFVec2f(value[1],value[0]); // swap components/reduce to 2D
			angles_out = value;
			currentView[0] = value[0];
			currentView[1] = value[1];

			rotationAngles_int=value;

			horizontalRotation_int[3] = value[1] * rotation_speed;
			verticalRotation_int[3] = -value[0] * rotation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function panTrans_in(value, time) {
			value=new SFVec2f(value[0],value[1]);		// reduce to 2D
			pan_out=value;
			currentView[3] = value[0];
			currentView[4] = value[1];

			translation_int[0] = value[0] * translation_speed;
			translation_int[1] = value[1] * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function zoomTrans_in(value, time) {
			value=value[1];												// reduce to scalar
			zoom_out = value;
			currentView[5] = value;

			translation_int[2] = value * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function isOver_in(value, time) { isOver_out = value; }
		function isActive_in(value, time) { isActive_out = value; }

		function switchActive_in(value, time) {
			if(!value) {
				visible = !visible;
				visible_out = visible;
				whichChoice_int = visible ? 0 : -1;
			}
		}"
	}

	ROUTE RotationTS.isOver TO Worker.isOver_in
	ROUTE RotationPS.isActive TO Worker.isActive_in
	ROUTE PanTS.isOver TO Worker.isOver_in
	ROUTE PanPS.isActive TO Worker.isActive_in
	ROUTE ZoomTS.isOver TO Worker.isOver_in
	ROUTE ZoomPS.isActive TO Worker.isActive_in

	ROUTE RotationPS.translation_changed TO Worker.rotationTrans_in
	ROUTE PanPS.translation_changed TO Worker.panTrans_in
	ROUTE ZoomPS.translation_changed TO Worker.zoomTrans_in

	ROUTE Worker.rotationOffset_int TO RotationPS.set_offset
	ROUTE Worker.panOffset_int TO PanPS.set_offset
	ROUTE Worker.zoomOffset_int TO ZoomPS.set_offset

	ROUTE Worker.horizontalRotation_int TO HorizontalTransform.set_rotation
	ROUTE Worker.verticalRotation_int TO VerticalTransform.set_rotation
	ROUTE Worker.translation_int TO TranslationTransform.set_translation

	ROUTE Worker.rotationAngles_int TO RotationIcon.set_angles

	ROUTE Worker.addChildren_int TO PanelGroup.addChildren

	ROUTE Worker.whichChoice_int TO PanelSwitch.whichChoice
	ROUTE Worker.visible_out TO SwitchIcon.set_on

	ROUTE SwitchTS.isActive TO Worker.switchActive_in
}
# -------------------------------------------------------------------
# End of NavigationPanel
# -------------------------------------------------------------------


#Proto for augmentation/replacement for headlight/navinfo:
PROTO NavLight [ exposedField SFFloat ambientIntensity 0.1
								 exposedField SFFloat intensity 1
								 exposedField SFColor color 1 1 1
								 exposedField SFVec3f attenuation 1 0 0
								 exposedField SFBool headlight FALSE
								 exposedField MFFloat avatarSize [ .25 1.6 .75 ]
								 exposedField SFFloat navigationSpeed 1
								 exposedField MFString navigationType ["WALK" "ANY"]
								 exposedField SFFloat visibilityLimit 0 ]
{
	DEF Fixture Transform {
		children [
			PointLight {
				ambientIntensity IS ambientIntensity
				intensity IS intensity
				color IS color
				attenuation IS attenuation
				radius 1e10
				location 0 0 0
			}
			NavigationInfo {
				avatarSize IS avatarSize
				type IS navigationType
				speed IS navigationSpeed
				visibilityLimit IS visibilityLimit
				headlight IS headlight
			}
		]
	}
	DEF PS ProximitySensor { size 1e10 1e10 1e10 }
	ROUTE PS.position_changed TO Fixture.set_translation
	ROUTE PS.orientation_changed TO Fixture.set_rotation
}

EXTERNPROTO ConvexLens [
	field SFFloat radius
	field SFFloat radiusOfCurvature
	field SFInt32 resolution
	field SFInt32 depthResolution
	eventIn SFFloat set_radius
	eventIn SFFloat set_radiusOfCurvature
	eventIn SFInt32 set_resolution
	eventIn SFInt32 set_depthResolution
]
"../vrmllib/Shapes.wrl#ConvexLens"

EXTERNPROTO RedConeXDragger [
	exposedField SFVec3f coneScale
	exposedField SFVec3f translation
	exposedField SFRotation rotation
	field SFFloat position
	eventIn SFFloat set_position
	eventOut SFFloat position_changed
	field SFFloat minPosition
	eventIn SFFloat set_minPosition
	field SFFloat maxPosition
	eventIn SFFloat set_maxPosition
	field SFFloat value
	eventIn SFFloat set_value
	eventOut SFFloat value_changed
	field SFFloat minValue
	eventIn SFFloat set_minValue
	field SFFloat maxValue
	eventIn SFFloat set_maxValue
	field SFBool positionAsValue
	eventOut SFBool isOver_out
	eventOut SFBool isActive_out
	eventIn SFBool set_isActive
	exposedField SFBool enabled
	field SFString debugName
	eventOut SFBool initialized
]
"../vrmllib/Widgets.wrl#RedConeXDragger"
EXTERNPROTO WheelWidget [
	field SFFloat value
	eventIn SFFloat set_value
	eventOut SFFloat value_changed
	field SFFloat minValue
	eventIn SFFloat set_minValue
	field SFFloat maxValue
	eventIn SFFloat set_maxValue
	field SFFloat maxRotations
	eventIn SFFloat set_maxRotations
	eventOut SFBool isActive_out
	eventOut SFBool isOver_out
	eventIn SFBool set_isActive
	exposedField SFBool enabled
	exposedField SFNode material
	exposedField SFNode activeMaterial
	field SFString debugName
	eventOut SFBool initialized
]
"../vrmllib/Widgets.wrl#WheelWidget"

PROTO AngleWidget [
  field        SFFloat  angle    0.785398  #PI/4
  exposedField SFBool   enabled  TRUE
  eventIn      SFFloat  set_angle
  eventIn      SFFloat  set_screenDistance
  eventIn      SFBool   set_isOver
  eventIn      SFBool   set_isActive
  eventOut     SFBool   isOver
  eventOut     SFBool   isActive
  eventOut     SFFloat   angle_changed
]
{
	#Copied from Widgets.wrl for Blaxxun's sake.  Do not edit here!
	PROTO RotationWidget [
		field SFFloat angle 0
		eventIn SFFloat set_angle
		eventOut SFFloat angle_changed
		#rotation_changed is provided for convenience; will always be (0,0,1,angle_changed)
		eventOut SFRotation rotation_changed

		field SFFloat minAngle 0			#If minAngle > maxAngle (as here), all angles allowed
		eventIn SFFloat set_minAngle
		field SFFloat maxAngle -1
		eventIn SFFloat set_maxAngle

		eventOut SFBool isActive_out
		eventOut SFBool isOver_out
		#Invoking the following set_ events affects which geometry is displayed.
		eventIn SFBool set_isActive
		eventIn SFBool set_isOver

		exposedField SFBool enabled TRUE

		field MFNode normalGeometry []
		field MFNode overGeometry []
		field MFNode activeGeometry []
		eventOut SFBool initialized
	]
	{
		Group {
			children [
				DEF TS TouchSensor {
					enabled IS enabled
					isOver IS isOver_out
				}
				DEF PS PlaneSensor {
					enabled IS enabled
					isActive IS isActive_out
				}
				DEF RotationalTransform Transform {
					children DEF GeometrySwitch Switch {
						whichChoice 0
						choice [
							Group { children IS normalGeometry }
							Group { children IS overGeometry }
							Group { children IS activeGeometry }
						]
					}
				}
			]
		}

		DEF Worker Script {
			field SFFloat minAngle IS minAngle
			eventIn SFFloat set_minAngle IS set_minAngle

			field SFFloat maxAngle IS maxAngle
			eventIn SFFloat set_maxAngle IS set_maxAngle

			field SFFloat angle0 IS angle
			eventIn SFFloat set_angle IS set_angle
			eventOut SFFloat angle_changed IS angle_changed
			field SFRotation rotation 0 0 1 0
			eventOut SFRotation rotation_changed IS rotation_changed

			eventIn SFVec3f ps_trans_in
			eventIn SFVec3f ts_hitPoint_in
			eventIn SFBool ts_active_in

			eventOut SFVec3f offset_out

			eventIn SFBool set_isActive IS set_isActive
			eventIn SFBool set_isOver IS set_isOver		#Also used by TS

			field SFBool firstHitPoint FALSE

			#The current angle of the widget (between drags or individual mouse-moves) is
			#represented as N*(2Pi)+theta; spins holds N and curTheta holds theta.
			field SFInt32 spins 0
			field SFFloat curTheta 0

			#These keep up with the user's attempt to go past pegging the widget:
			#inputTheta is unclamped, inputSpins is clamped to maximum useful spins + 1
			field SFFloat inputTheta 0
			field SFInt32 inputSpins 0
			#This still isn't perfect for widgets with non-x-axis stop points... [?]

			#The angle from the widget's x-axis at which the user grabbed it must be considered...
			field SFFloat grabDelta 0

			#Memory of mouse activity (for selecting which geometry to display)
			field SFBool isActive FALSE
			field SFBool isOver FALSE
			eventOut SFInt32 whichChoice_changed

			field MFNode overGeometry IS overGeometry
			field MFNode activeGeometry IS activeGeometry

			field SFBool inited TRUE				#temp: for compatibility
			eventOut SFBool initialized IS initialized

			url "javascript:
			function initialize() {
				set_angle(angle0,null);

				inited=true;
				initialized=true;
			}

			function ps_trans_in(value,time) {
				var theta = Math.atan2(value[1], value[0])-grabDelta;
				while(theta<0) theta += 2*Math.PI;

				//Discard extra spins when crossing the maxAngle/minAngle point
				var angle=theta+spins*2*Math.PI;
				//print('theta: '+theta+'\tangle: '+angle+'\ninputSpins0: '+inputSpins+'\tspins0: '+spins);

				if(theta<Math.PI/2 && inputTheta>=Math.PI*3/2) {
					if(inputSpins<=spins) inputSpins++;		//Extra extra spins are ignored
				} else if(theta>=Math.PI*3/2 && inputTheta<Math.PI/2) {
					if(inputSpins>=spins) inputSpins--;
				} else if(minAngle<maxAngle && ((angle<minAngle && inputSpins<spins) ||
																				(angle>maxAngle && inputSpins>spins))) {
					//print('(a<min & i<s) | (a>max & i>s)');
					inputSpins=spins;
				}

				inputTheta=theta;
				angle=theta+inputSpins*2*Math.PI;

				//print('inputSpins\': '+inputSpins+'\tangle2: '+angle);
				//Discard invalid values if min and max angles set
				if(minAngle<=maxAngle && (angle<minAngle || angle>maxAngle)) {
					//print('!denied!');
					var lastAngle=curTheta+spins*2*Math.PI;
					//When first crossing the line, peg the widget
					if(lastAngle!=minAngle && lastAngle!=maxAngle)
						set_angle((angle<minAngle)?minAngle:maxAngle);
					return;
				}

				//print('accepted\n\n');
				//Otherwise, update the widget
				spins=inputSpins;
				curTheta = theta;
				send_events(angle);
			}

			//Davis: I'm not sure of the safety of calling this from
			//the outside while a drag is going on.  So don't.
			function set_angle(value) {
				if(minAngle>=maxAngle || (value>=minAngle && value<=maxAngle)) {
					send_events(value);
					curTheta = value;
					spins=0;
					//Unfortunately, we now have to work curTheta into the [0,2*PI) interval.
					while(curTheta>=2*Math.PI) {curTheta-=2*Math.PI; spins++;}
					while(curTheta<0) {curTheta+=2*Math.PI; spins--;}
					if(!isActive) {
						inputTheta=curTheta;
						inputSpins=spins;
					}
				} else
				print('\n\nRotationWidget::set_angle: angle '+value+' out of range ['+minAngle+', '+maxAngle+']');
			}

			function send_events(angle) {
				rotation[3] = angle;
				if(inited) {
					angle_changed = angle;
					rotation_changed=rotation;
				}
			}

			function set_minAngle(value,time) {
				minAngle = value;
				if(minAngle<=maxAngle && curTheta+spins*2*Math.PI<minAngle)	//Need to clamp angle
					set_angle(minAngle,time);
			}

			function set_maxAngle(value,time) {
				maxAngle = value;
				if(minAngle<=maxAngle && curTheta+spins*2*Math.PI>maxAngle)	//Need to clamp angle
					set_angle(maxAngle,time);
			}

			function ts_hitPoint_in(value,time) {
				if(firstHitPoint) {
					firstHitPoint = false;
					offset_out[0] = value[0];
					offset_out[1] = value[1];
					grabDelta = Math.atan2(value[1], value[0]) - curTheta;
					if(grabDelta<0) grabDelta += Math.PI*2;
				}
			}

			function ts_active_in(value,time) {
				if(value)
					firstHitPoint = true;
				else {
					//Overwrite mouse-tracking data with real data
					inputSpins=spins;
					inputTheta=curTheta;
				}
				set_isActive(value,time);
			}

			function set_isActive(value,time) {
				isActive = value;
				if(value) {
					if(activeGeometry.length > 0) whichChoice_changed = 2;
				} else {
					if(isOver && overGeometry.length > 0) whichChoice_changed = 1;
					else whichChoice_changed = 0;
				}
			}

			function set_isOver(value,time) {
				isOver = value;
				if(value) {
					if(!isActive && overGeometry.length > 0) whichChoice_changed = 1;
				} else {
					if(isActive && activeGeometry.length > 0) whichChoice_changed = 2;
					else whichChoice_changed = 0;
				}
			}"
		}

		ROUTE TS.hitPoint_changed TO Worker.ts_hitPoint_in
		ROUTE TS.isActive TO Worker.ts_active_in
		ROUTE TS.isOver TO Worker.set_isOver
		ROUTE PS.translation_changed TO Worker.ps_trans_in
		ROUTE Worker.rotation_changed TO RotationalTransform.set_rotation
		ROUTE Worker.offset_out TO PS.set_offset
		ROUTE Worker.whichChoice_changed TO GeometrySwitch.set_whichChoice
	}

	#This is the only known copy of this PROTO (it's not in Shapes.wrl).  So edit here, and don't delete.
	PROTO CylinderFrustum [
		field SFFloat radius 1
		eventIn SFFloat set_radius
		field SFFloat tiltAngle .5
		eventIn SFFloat set_tiltAngle
		field SFBool doTilt FALSE
		field SFFloat planeDistance 5
		eventIn SFFloat set_planeDistance
		field SFFloat extraLength 10
		eventIn SFFloat set_extraLength
		field SFInt32 resolution 32
		field SFBool endCap TRUE
		field SFBool solid TRUE
	]
	{
		DEF IFS IndexedFaceSet {
			coord DEF Coord Coordinate {}
			solid IS solid
			#ccw TRUE
		}
		DEF S Script {
			field SFFloat r IS radius
			eventIn SFFloat r_in IS set_radius
			field SFFloat theta IS tiltAngle
			eventIn SFFloat theta_in IS set_tiltAngle
			field SFBool tilt IS doTilt
			field SFFloat d IS planeDistance
			eventIn SFFloat d_in IS set_planeDistance
			field SFFloat eLen IS extraLength
			eventIn SFFloat e_in IS set_extraLength
			field SFInt32 res IS resolution
			field SFBool cap IS endCap
			eventOut MFVec3f coord_out
			eventOut MFInt32 indices_out

			url	"javascript:
			function initialize() {render();}

			function r_in(value,time) {r=value; render();}
			function theta_in(value,time) {theta=value; render();}
			function d_in(value,time) {d=value; render();}
			function e_in(value,time) {eLen=value; render();}

			function render() {
				//print('render(r,t,d,e): '+r+' '+theta+' '+d+' '+eLen);
				var i,phi,tiltVec,baseVec,k;
				if(tilt)
					tiltVec=new SFVec3f(Math.sin(theta),0,-Math.cos(theta));
				else
					tiltVec=new SFVec3f(0,0,-1);
				for(i=0;i<res;i++) {
					phi=2*Math.PI*i/(res-1);
					k=(d+r*Math.sin(theta)*Math.cos(phi))/Math.cos(theta);		//eLen is used later
					if(tilt) baseVec=new SFVec3f(r*Math.cos(theta)*Math.cos(phi),
																			 r*Math.sin(phi),
																			 r*Math.sin(theta)*Math.cos(phi));
					else baseVec=new SFVec3f(r*Math.cos(phi),r*Math.sin(phi),0);
					coord_out[i]=baseVec.subtract(tiltVec.multiply(eLen));
					/*print(*/coord_out[i+res]=baseVec.add(tiltVec.multiply(k))/*)*/;
					indices_out[5*i]=i;
					indices_out[5*i+1]=(i+res-1)%res;
					indices_out[5*i+2]=(i+res-1)%res+res;
					indices_out[5*i+3]=i+res;
					indices_out[5*i+4]=-1;
					indices_out[5*res+i]=i;
					if(cap)
						indices_out[5*res+(res+1)+i]=(res-i-1)+res;
				}
				indices_out[5*res+res]=-1;
				if(cap) indices_out[5*res+(res+1)+res]=-1;
			}"
		}
		ROUTE S.coord_out TO Coord.set_point
		ROUTE S.indices_out TO IFS.set_coordIndex
	}

  Transform {
    rotation 1 0 0 1.5707963
    children [
      DEF AngleWidget-ROTATIONWIDGET RotationWidget {
        minAngle 0
        #maxAngle 1.5707963
		maxAngle 1.5508156	 #[Peter] This can fix problem of using the AngleWidget to drag the angle out of range
        enabled IS enabled
        isActive_out IS isActive
        isOver_out IS isOver
        set_isOver IS set_isOver
        set_isActive IS set_isActive
        normalGeometry [
          Transform {
            #translation 0 -250 0
						rotation 1 0 0 -1.5707963268 #[Davis]
            children [
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 0.9 0.9 0.9
									}
								}
								#							geometry DEF LightPencilGeo Cylinder {
								#								radius 5
								#								height 1650
								#							}
								geometry DEF LightPencilGeo CylinderFrustum {
									radius 5
									doTilt FALSE
									planeDistance 500   #Will be overwritten promptly
									set_planeDistance IS set_screenDistance
									extraLength 800
								}
							}
						]
          }
        ]
        activeGeometry [
          Transform {
            #translation 0 -250 0
						rotation 1 0 0 -1.5707963268
            children Shape {
              appearance Appearance {
                material Material {
                  diffuseColor 1 1 0
                }
              }
              geometry USE LightPencilGeo
            }
          }
        ]
      }
      Transform {
        rotation 0 1 0 3.14159265
        children USE AngleWidget-ROTATIONWIDGET
      }
    ]
  }

  DEF AngleWidget-SCRIPT Script {
    field     SFFloat  angle IS angle
    eventIn   SFFloat  set_offset
    eventIn   SFFloat  set_angle IS set_angle

    eventOut  SFFloat  offset_changed
    eventOut  SFFloat  angle_changed IS angle_changed

    eventIn SFFloat screen_dist IS set_screenDistance
    url "javascript:
      function initialize() {
        offset_changed = angle / 2.0;
      }

      function set_offset(value, time) {
        angle_changed = value * 2.0;
      }

      function set_angle(value, time) {
        offset_changed = value / 2.0;
      }"
  }

  ROUTE AngleWidget-ROTATIONWIDGET.angle_changed TO AngleWidget-SCRIPT.set_offset
  ROUTE AngleWidget-SCRIPT.offset_changed TO AngleWidget-ROTATIONWIDGET.set_angle
  ROUTE AngleWidget-ROTATIONWIDGET.angle_changed TO LightPencilGeo.set_tiltAngle
  ROUTE AngleWidget-SCRIPT.offset_changed TO LightPencilGeo.set_tiltAngle
}

NavLight { navigationType "NONE" }

DEF NavPanel NavigationPanel {
	translation_speed 100
	center 0 0 -500
	views [ -0.5 -0.4 0 1 -2 -12, -0.4 0 0 0 -2 -12 ]
	children [
		##########################################################
		# Warning text
		##########################################################
		DEF warningTextSwitch Switch {
			whichChoice 0
			choice [
				Billboard {
					axisOfRotation 0 0 0
					children [
						Transform {
							translation -300 350 0
							children [
								Shape {
									appearance Appearance {
										material Material {
											diffuseColor 0 0 0		# black
											specularColor 0 0 0		# black
											ambientIntensity 0.0	# black
											shininess 0.0					# none
											emissiveColor 1 0 0
										}
									}
									geometry Text {
										string "Loading... Please wait."
										fontStyle FontStyle {
											size 120
										}
									}
								}
							]
						}
					]
				}
			]
		}
		##########################################################
		Inline {
			url				 "../vrmllib/BoundingBox.wrl"
			bboxSize				1000 300 1000
			bboxCenter				0 0 -500
		}
		################
		## Aperture
		Group {
			children [
				Shape {
					geometry Box { size 1000 300 0.3 }
					appearance Appearance {
						material Material {
							ambientIntensity	 0.2
							diffuseColor	 .3 .6 .9
							specularColor	 0 0 0
							emissiveColor	 0 0 0
							shininess			 0.2
							transparency	 0.6
						}
					}
				}
			]
		}
		################
		## Lens
		## DirectionalLight {
		## direction		0.5 0 -0.5
		## }
		DEF scaleLens Transform {
			children [
				DirectionalLight {
					direction 0.2 0 -0.5
					intensity				 0.8
				}
				Shape {
					appearance
					Appearance {
						material
						Material {
							ambientIntensity		0.0650877
							diffuseColor		0.0575819 0.0309427 0.29568
							specularColor		 0.797872 0.797872 0.797872
							emissiveColor		 0.239362 0.285461 0.319149
							shininess		 0.755319
							transparency		0.712766
						}
					}
					geometry ConvexLens {
						radius 1
						radiusOfCurvature 6
						resolution 24
						depthResolution 8
					}
				}
			]
		}

		#########################
		### Lens Dragger
		Transform {
			scale 25 25 25
			children [
				DEF lensDraggerSwitch Switch {
					whichChoice 0
					choice [
						DEF lensDragger RedConeXDragger {
							minPosition 0.1
							maxPosition 6
							position 2.68390106163
						}
					]}
			]
		}
		#########################

		################################################################
		## Red box
		##
		## Transform {
		##	scale 5 5 1000
		##	children [
		##		Shape {
		##			appearance Appearance { material Material { diffuseColor 1 0 0 } }
		##			geometry Box {}
		##		}
		##	]
		## }

		######################### end of lens

		DEF rayWidgetSwitch Switch {
			whichChoice 0
			choice [
				#this is only commented for testing -- it should be used for distribution
				DEF rayWidget AngleWidget { }
			]}

		#								 DEF angleSeparator Transform {
		#										 # translation				0 0 -300
		#										 #translation				 0 0 -300
		#										 rotation				 1 0 0	1.5708
		#										 scale				15 15 15
		#										 children [
		#
		################################################################
		## Green box
		##
		## Shape {
		##	 appearance Appearance { material Material { diffuseColor 0 1 0 } }
		##	 geometry Box { size 2 20 2 }
		##	}
		#												 Transform {
		#													 #translation 0 -20 0
		#													 children [
		#														 DEF	raySensorTouch TouchSensor {}
		#														 DEF raySensor CylinderSensor {
		#																 maxAngle 1
		#																 diskAngle 6.2831853
		#																 offset 0.392699
		#														 }
		#														 DEF angleDragger1 Transform {
		#																 #rotation 0 0 1 0.392699
		#																 translation 0 -20 0
		#																 center 0 20 0
		#																 children [
		#																		 DEF rayCylinder Shape {
		#																				 appearance Appearance {
		#																						 material Material {
		#																								 diffuseColor 0.8 0.8 0.8
		#																						 }
		#																				 }
		#																				 geometry Cylinder {
		#																						 radius 0.5
		#																						 height 110
		#																				 }
		#																		 }
		#																 ]
		#														 }
		#													 ]
		#												 }
		#												 Transform {
		#													 rotation 1 0 0 3.14159
		#													 # translation 0 0 0
		#													 #translation 0 20 0
		#													 children [
		#														 USE raySensorTouch
		#														 USE raySensor
		#														 DEF angleDragger2 Transform {
		#															 #rotation 0 0 1 0.392699
		#															 translation 0 20 0
		#															 center 0 -20 0
		#															 children [
		#																 USE rayCylinder
		#															 ]
		#														 }
		#													 ]
		#												 }
		#										 ]
		#								 }
		DEF wavelengthWidgetSwitch Switch {
			whichChoice 0
			choice [
				Transform {
					translation 0 -30 220
					scale 75 75 75
					children DEF wavelengthWidget WheelWidget { maxRotations 4 }
				}
			]}

		Transform {
			translation 0 150 0 # -500
			scale 25 25 25
			rotation -1 1 1 2.1		#a vector (X,Y,Z) without -> (-Y,Z,-X) with
			children [
				DEF translateScreenSwitch Switch {
					whichChoice 0
					choice [
						DEF translateScreen RedConeXDragger {
							minPosition 1
							maxPosition 40
							position 20
						}
					]
				}
			]
		}
		DEF ScreenTransform Transform {
			translation 0 0 -500
			children [
				Shape {
					appearance Appearance {
						material Material {
							diffuseColor 1 1 0
							emissiveColor 1 1 0
						}
					}
					geometry IndexedFaceSet {
						coord Coordinate {
							point [
								500 -150 -10,
								-500 -150 -10,
								-500	150 -10,
								500	 150 -10,
								500 -150	 0,
								-500 -150		0,
								-500	150		0,
								500	 150	 0,
							]
						}
						coordIndex [
							0, 1, 2, 3, -1, # back
							1, 5, 6, 2, -1, # left
							0, 3, 7, 4, -1, # right
							3, 2, 6, 7, -1, # top
							0, 4, 5, 1, -1, # bottom
						]
					}
				}
				DEF Screen-SWITCH Switch {
					whichChoice 0
					choice [
						Group {
							children [
								#We only draw the top-left quadrant of the screen,
								#and then replicate that object four times:
								DEF HighScreen Shape {
									geometry DEF ifsNode IndexedFaceSet {
										coord DEF coordinateNode Coordinate { }
										color DEF colorNode Color { }
										solid FALSE
									}
								}
								Transform {
									rotation 0 1 0 3.14159265
									children USE HighScreen
								}
								Transform {
									rotation 0 0 1 3.14159265
									children USE HighScreen
								}
								Transform {
									rotation 1 0 0 3.14159265
									children USE HighScreen
								}
								Transform {
									translation 0 150 0
									children [
										Shape {
											appearance DEF graphAppearance Appearance {
												material Material {
													emissiveColor				0.8 0.8 0.8
												}
											}
											geometry DEF graphNode IndexedLineSet {
												coord DEF graphCoordinate Coordinate { }
											}
										}
									]
								}
							]
						} # High resolution group
						Group {
							children [
								DEF LowScreen Shape {
									geometry DEF ifsNodeLowRes IndexedFaceSet {
										coord DEF coordinateNodeLowRes Coordinate { }
										color DEF colorNodeLowRes Color { }
										solid FALSE
									}
								}
								Transform {
									rotation 0 1 0 3.14159265
									children USE LowScreen
								}
								Transform {
									rotation 0 0 1 3.14159265
									children USE LowScreen
								}
								Transform {
									rotation 1 0 0 3.14159265
									children USE LowScreen
								}
								Transform {
									translation 0 150 0
									children [
										Shape {
											appearance USE graphAppearance
											geometry DEF graphNodeLowRes IndexedLineSet {
												coord DEF graphCoordinateLowRes Coordinate { }
											}
										}
									]
								}
							]
						} # Low resolution group
					]
				}
			]
		}
	]
}

DEF ScreenWorker Script {
	eventIn SFFloat translation_in
	eventOut SFFloat scaled_out		#Kluge: should be the dragger's job [Davis]
	eventOut SFVec3f screen_translation_out

	url "javascript:
	function translation_in(value, time) {
		zCurrent = -value * 25.0;
		scaled_out=-zCurrent;

		screen_translation_out[2] = zCurrent;
	}"
}

DEF LensWorker Script {
	eventIn SFFloat translation_in
	eventOut SFVec3f scale_out

	url "javascript:
	function translation_in(value, time) {
		scale_out = new SFVec3f(25*value,25*value,25*value);
	}"
}

ROUTE lensDragger.position_changed TO LensWorker.translation_in
ROUTE LensWorker.scale_out TO scaleLens.set_scale

ROUTE translateScreen.position_changed TO ScreenWorker.translation_in
ROUTE ScreenWorker.screen_translation_out TO ScreenTransform.set_translation
ROUTE ScreenWorker.scaled_out TO rayWidget.set_screenDistance
