#VRML V2.0 utf8

# Credits:
#  -- XDragWidget written by Paul Isaacs (pauli@sgi.com) with
#       modifications by Kiril Vidimce and by Davis Herring

# -------------------------------------------------------------------
# PROTOs that are part of Chi's NavigationPanel [v3.01]
# -------------------------------------------------------------------

#A prototype for the viewpoint objects
PROTO NavigationPanel_ViewPointPROTO [ exposedField SFBool enabled TRUE
	field SFInt32 num 0
	eventOut SFInt32 selected
	eventOut SFBool isOver_out
	eventOut SFBool isActive_out ]
{
	DEF T Transform {
		scale 0.1 0.1 0.1
		children [
			DEF TS TouchSensor {
				enabled IS enabled
				isActive IS isActive_out
				isOver IS isOver_out
			}
			Transform {
				rotation 0 1 0 0.4
				children Transform {
					rotation 1 0 0 0.6
					children Transform {
						translation 0 0 0.5
						children [
							Shape {
								appearance Appearance { material Material { diffuseColor 0 0 1 } }
								geometry Sphere { radius 0.1 }
							}
							Transform {
								rotation -0.7071 0.7071 0 -0.5236
								children DEF Rod Transform {
									translation 0 0 -0.5
									rotation 1 0 0 -1.5707963
									children Shape {
										appearance Appearance { material Material { diffuseColor 0.6 0.6 0.6 } }
										geometry Cylinder { radius 0.025 height 1 }
									}
								}
							}
							Transform {
								rotation -0.7071 0.7071 0 0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 -0.5236
								children USE Rod }
							Transform {
								rotation 0.7071 0.7071 0 0.5236
								children USE Rod }
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 1 1 0.2
										transparency 0.5
									}
								}
								geometry IndexedFaceSet {
									coord Coordinate {
										point [ 0 0 0, 0.3536 0.3536 -0.866, -0.3536 0.3536 -0.866, -0.3536 -0.3536 -0.866, 0.3536 -0.3536 -0.866 ]
									}
									coordIndex [ 0 1 2 -1, 0 2 3 -1, 0 3 4 -1, 0 4 1 -1 ]
								}
							}
						]
					}
				}
			}
		]
	}
	DEF Worker Script {
		field SFInt32 n IS num
		eventIn SFBool active
		eventOut SFInt32 selected IS selected
		eventOut SFVec3f trans_out
		url "javascript:
		function initialize() {trans_out=new SFVec3f(-.7+n*.1,-0.75,-2);}
		function active(value,time) {if(!value)selected=n;}"
	}
	ROUTE TS.isActive TO Worker.active
	ROUTE Worker.trans_out TO T.set_translation
}

PROTO NavigationPanel [
	exposedField SFBool enabled						 TRUE

	field			SFBool visible							 TRUE
	eventIn		SFBool set_visible
	eventOut	SFBool visible_changed

	exposedField MFNode children					 []

	exposedField SFVec3f center							0 0 0

	field		 MFFloat		views							 [0 0 0 0 0 0]
	field		 SFInt32		activeView				 0

	field		 SFFloat		rotation_speed		 1
	field		 SFFloat		translation_speed	 20

	#External (EAI) control of the view
	eventIn	 SFVec2f		set_angles
	eventIn	 SFVec2f		set_pan
	eventIn	 SFFloat		set_zoom
	eventIn	 MFFloat		set_view
	eventIn	 SFInt32		set_activeView

	#External (EAI) information on the view
	eventOut SFBool			isActive_out
	eventOut SFBool			isOver_out
	eventOut SFBool			rotation_isOver_out
	eventOut SFBool			rotation_isActive_out
	eventOut SFBool			pan_isOver_out
	eventOut SFBool			pan_isActive_out
	eventOut SFBool			zoom_isOver_out
	eventOut SFBool			zoom_isActive_out
	eventOut SFBool			switch_isOver_out
	eventOut SFBool			switch_isActive_out
	eventOut SFVec2f		angles_changed
	eventOut SFVec2f		pan_changed
	eventOut SFFloat		zoom_changed

	#activeView_changed events are always sent before the corresponding
	#view_changed events to allow a client to determine the reason for a
	#viewpoint change.
	eventOut MFFloat		view_changed
	eventOut SFInt32		activeView_changed ]
{
	PROTO RotateIcon [
		field	 SFVec2f	angles 0 0
		field	 SFFloat	speed	 1
		eventIn SFVec2f set_angles ]
	{
		DEF PitchTransform Transform {
			children DEF YawTransform Transform {
				children Shape {
					appearance Appearance {
						texture ImageTexture { url [ "../images/checker.jpg" "checker.jpg" ] }
						material Material { diffuseColor 0.5 0.5 0.5 }
					}
					geometry Sphere { radius 0.5 }
				}
			}
		}

		DEF Worker Script {
			field SFVec2f angles IS angles
			field SFFloat speed IS speed

			eventIn SFVec2f set_angles IS set_angles

			eventOut SFRotation yawRotation_changed
			eventOut SFRotation pitchRotation_changed

			url "javascript:
			function initialize() {
				yawRotation_changed = new SFRotation(0, 1, 0, angles[1]*speed);
				pitchRotation_changed = new SFRotation(1, 0, 0, -angles[0]*speed);}

			function set_angles(value, time) {
				yawRotation_changed[3] = value[1] * speed;
				pitchRotation_changed[3] = -value[0] * speed;}
			"
		}

		ROUTE Worker.yawRotation_changed TO YawTransform.set_rotation
		ROUTE Worker.pitchRotation_changed TO PitchTransform.set_rotation
	}

	PROTO ZoomIcon [ ]
	{
		Transform {
			scale 1 0.5 1
			rotation 1 0 0 -1.0
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	 0.4 0.25 0.1,		0.175 0.25 0.1,		 0.35 -0.5 0.1,	 0.5 -0.5 0.1,
							0 -1 0.1,	 -0.5 -0.5 0.1,	 -0.35 -0.5 0.1,	-0.175 0.25 0.1,	-0.4 0.25 0.1,
							0 1 -0.1,	 0.4 0.25 -0.1,		0.175 0.25 -0.1,	 0.35 -0.5 -0.1, 0.5 -0.5 -0.1,
							0 -1 -0.1, -0.5 -0.5 -0.1, -0.35 -0.5 -0.1, -0.175 0.25 -0.1, -0.4 0.25 -0.1 ]
					}
					coordIndex [
						0 9 1 -1, 8 7 3 2 -1, 4 6 5 -1,
						10 11 19 -1, 18 12 13 17 -1, 16 14 15 -1,
						10 0 1 11 -1, 11 1 2 12 -1, 12 2 3 13 -1, 13 3 4 14 -1, 14 4 5 15 -1,
						0 10 19 9 -1, 9 19 18 8 -1, 8 18 17 7 -1, 7 17 16 6 -1, 6 16 15 5 -1 ]
				}
			}
		}
	}

	PROTO PanIcon [ ]
	{
		Transform {
			scale 0.5 0.5 1
			children Shape {
				appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 } }
				geometry IndexedFaceSet {
					coord Coordinate {
						point [
							0 1 0.1,	0.5 0.6 0.1,	 0.3 0.6 0.1,		0.3 0.3 0.1,		0.6 0.3 0.1,	 0.6 0.5 0.1,
							1 0 0.1,	0.6 -0.5 0.1,	 0.6 -0.3 0.1, 0.3 -0.3 0.1,	 0.3 -0.6 0.1,	0.5 -0.6 0.1,
							0 -1 0.1, -0.5 -0.6 0.1, -0.3 -0.6 0.1,	 -0.3 -0.3, 0.1, -0.6 -0.3 0.1, -0.6 -0.5 0.1,
							-1 0 0.1, -0.6 0.5 0.1,	 -0.6 0.3 0.1,	-0.3 0.3 0.1,		-0.3 0.6 0.1,	 -0.5 0.6 0.1,

							0 1 -0.1,	 0.5 0.6 -0.1,	 0.3 0.6 -0.1,	 0.3 0.3 -0.1,		0.6 0.3 -0.1,		0.6 0.5 -0.1,
							1 0 -0.1,	 0.6 -0.5 -0.1,	 0.6, -0.3 -0.1, 0.3 -0.3 -0.1,		0.3 -0.6 -0.1,	0.5 -0.6 -0.1,
							0 -1 -0.1, -0.5 -0.6 -0.1, -0.3 -0.6 -0.1,	-0.3 -0.3, -0.1, -0.6 -0.3 -0.1, -0.6 -0.5 -0.1,
							-1 0 -0.1, -0.6 0.5 -0.1,	 -0.6 0.3 -0.1,	 -0.3 0.3 -0.1,		-0.3 0.6 -0.1,	-0.5 0.6 -0.1 ]
					}
					coordIndex [
						0 23 1 -1, 2 22 14 10 -1, 6 5 7 -1, 4 3 9 8 -1, 11 13 12 -1, 19 18 17 -1, 21 20 16 15 -1,
						24 25 47 -1, 46 26 34 38 -1, 29 30 31 -1, 27 28 32 33 -1, 35 36 37 -1, 39 33 34 38 -1, 41 42 43 -1, 44 45 39 40 -1,

						24 0 1 25 -1, 25 1 2 26 -1, 26 2 3 27 -1, 27 3 4 28 -1, 28 4 5 29 -1, 29 5 6 30 -1,
						30 6 7 31 -1, 31 7 8 32 -1, 32 8 9 33 -1, 33 9 10 34 -1, 34 10 11 35 -1, 35 11 12 36 -1,
						36 12 13 37 -1, 37 13 14 38 -1, 38 14 15 39 -1, 39 15 16 40 -1, 40 16 17 41 -1, 41 17 18 42 -1,
						42 18 19 43 -1, 43 19 20 44 -1, 44 20 21 45 -1, 45 21 22 46 -1, 46 22 23 47 -1, 47 23 0 24 -1 ]
				}
			}
		}
	}

	PROTO SwitchIcon [ field SFBool on TRUE
										 eventIn SFBool set_on ]
	{
		DEF OnOff Switch {
			whichChoice 0
			choice [
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OnAppearance Appearance {
								material Material { diffuseColor 0.8 0.2 0.2 }
							}
							geometry DEF C1 Cylinder { radius 0.15 height 0.3 }
						}
						Shape {
							appearance USE OnAppearance
							geometry DEF C2 Cylinder { radius 0.25 height 0.2 }
						}
					]
				}
				Transform {
					rotation 1 0 0 1.5707963
					children [
						Shape {
							appearance DEF OffAppearance Appearance {
								material Material { diffuseColor 0.4 0.0 0.0 }
							}
							geometry USE C1
						}
						Shape {
							appearance USE OffAppearance
							geometry USE C2
						}
					]
				}
			]
		}
		DEF Worker Script {
			field SFBool on IS on
			eventIn SFBool set_on IS set_on
			eventOut SFInt32 whichChoice_changed
			url "javascript:
			function initialize() {if(!on) whichChoice_changed = 1;}
			function set_on(value, time) {whichChoice_changed = value ? 0 : 1;}"
		}
		ROUTE Worker.whichChoice_changed TO OnOff.whichChoice
	}
	#END OF INTERIOR PROTOs

	Group {
		children [
			DEF TranslationTransform Transform {
				children DEF VerticalTransform Transform {
					children DEF HorizontalTransform Transform {
						center IS center
						children IS children #This is where the scene goes
					}
				}
			}

			DEF	PanelTransform Transform {
				children [
					DEF PanelSwitch Switch {
						whichChoice 0
						choice DEF PanelGroup Group {
							children [

								#Here shall be inserted (at initialize time) the viewpoint-selection icons.

								Transform {
									scale 0.1 0.1 0.1
									translation 0.15 -0.75 -2
									children [
										DEF RotationTS TouchSensor {
											enabled IS enabled
											isOver	IS rotation_isOver_out
										}
										DEF RotationPS PlaneSensor {
											enabled	 IS enabled
											isActive IS rotation_isActive_out
										}
										DEF RotationIcon RotateIcon { speed IS rotation_speed }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation 0.0 -0.75 -2
									children [
										DEF PanTS TouchSensor {
											enabled IS enabled
											isOver	IS pan_isOver_out
										}
										DEF PanPS PlaneSensor {
											enabled	 IS enabled
											isActive IS pan_isActive_out
										}
										PanIcon { }
									]
								}

								Transform {
									scale 0.1 0.1 0.1
									translation -0.15 -0.75 -2
									children [
										DEF ZoomTS TouchSensor {
											enabled IS enabled
											isOver	IS zoom_isOver_out
										}
										DEF ZoomPS PlaneSensor {
											enabled	 IS enabled
											isActive IS zoom_isActive_out
										}
										ZoomIcon { }
									]
								}
							]
						}
					}

					Transform {
						scale 0.1 0.1 0.1
						translation 0.85 -0.75 -2
						children [
							DEF SwitchTS TouchSensor {
								enabled IS enabled
								isOver IS switch_isOver_out
								isActive IS switch_isActive_out
							}
							DEF SwitchIcon SwitchIcon {
								on IS visible
								set_on IS set_visible
							}
						]
					}
				]
			}

			DEF ProxSensor ProximitySensor {
				size 1e10 1e10 1e10
				ROUTE ProxSensor.orientation_changed TO PanelTransform.set_rotation
				ROUTE ProxSensor.position_changed TO PanelTransform.set_translation
			}

			DEF NPViewpoint Viewpoint { position 0 0 0 }
		]
	}

	# --------------------------------------------------------------- #
	# Script node that processes and transforms all internal/					#
	# external events.																								#
	# --------------------------------------------------------------- #
	DEF Worker Script {
		#views is never changed and holds the pre-defined viewpoints.
		field			MFFloat	 views IS views
		field			SFInt32	 nViews 0					# count of predefined views
		#activeView holds the current view, or -1 if the viewpoint has been
		#modified since last predefined-view selection.
		field			SFInt32	 activeView IS activeView
		field			MFFloat	 currentView [ 0 0 0 0 0 0 ]

		field			SFFloat	 rotation_speed IS rotation_speed
		field			SFFloat	 translation_speed IS translation_speed

		field			SFBool visible IS visible
		eventIn		SFBool set_visible IS set_visible
		eventOut	SFBool visible_out IS visible_changed

		eventIn		SFVec2f	 set_angles IS set_angles
		eventIn		SFVec2f	 set_pan		IS set_pan
		eventIn		SFFloat	 set_zoom		IS set_zoom
		eventIn		MFFloat	 set_view		IS set_view
		eventIn		SFInt32	 set_activeView IS set_activeView

		eventOut	SFBool	 isOver_out			IS isOver_out
		eventOut	SFBool	 isActive_out		IS isActive_out

		eventOut	SFVec2f	 angles_out IS angles_changed
		eventOut	SFVec2f	 pan_out		IS pan_changed
		eventOut	SFFloat	 zoom_out		IS zoom_changed
		eventOut	MFFloat	 view_out		IS view_changed

		eventOut	SFInt32	 activeView_out IS activeView_changed

		#The other parts of NavigationPanel use these events:
		eventIn		SFBool	 isOver_in
		eventIn		SFBool	 isActive_in

		eventIn		SFInt32	 vpActive_in
		eventIn		SFBool	 switchActive_in

		eventIn		SFVec3f		 rotationTrans_in
		eventIn		SFVec3f		 panTrans_in
		eventIn		SFVec3f		 zoomTrans_in

		eventOut	SFRotation horizontalRotation_int
		eventOut	SFRotation verticalRotation_int
		eventOut	SFVec3f		 translation_int

		eventOut	SFVec2f rotationAngles_int
		eventOut	SFVec3f rotationOffset_int
		eventOut	SFVec3f panOffset_int
		eventOut	SFVec3f zoomOffset_int

		#This will be routed to the switch holding the motion controls
		eventOut	SFInt32 whichChoice_int

		#This is used to add the viewpoint objects
		eventOut	MFNode addChildren_int
		field			SFNode This USE Worker
		field			SFNode enabledSource USE RotationTS

		url "javascript:
		function initialize() {
			var i,VPstr='',VPnodes;
			nViews = views.length / 6;
			if(nViews==0) {
				views = new MFFloat(0,0,0,0,0,0);
				nViews = 1;
			}
			if(nViews > 5) nViews=5;
			if(activeView >= nViews) activeView = nViews - 1;
			if(activeView < 0) activeView = 0;

			//Initialize data: set_all_internal assumes
			//zoomOffset_int has been initialized, so:
			zoomOffset_int = new SFVec3f(0, 0, 0);
			set_all_internal(views,activeView*6);

			set_visible(visible,0);

			for(i=0;i<nViews;i++) VPstr+='NavigationPanel_ViewPointPROTO{num '+i+'}';

			VPnodes=Browser.createVrmlFromString(VPstr);

			for(i=0;i<nViews;i++) {
				Browser.addRoute(VPnodes[i],'selected',This,'vpActive_in');
				Browser.addRoute(VPnodes[i],'isOver_out',This,'isOver_in');
				Browser.addRoute(VPnodes[i],'isActive_out',This,'isActive_in');
				Browser.addRoute(enabledSource,'enabled_changed',VPnodes[i],'set_enabled');
			}

			//Add nodes to panel
			addChildren_int=VPnodes;
		}

		function set_visible(value, time) { whichChoice_int = value ? 0 : -1; }

		function set_angles(value, time) {
			rotationOffset_int = new SFVec3f(value[1],value[0]);
			horizontalRotation_int[3] = value[1];
			verticalRotation_int[3] = -value[0];

			currentView[0] = value[0];
			currentView[1] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_pan(value, time) {
			panOffset_int[0] = value[0];
			panOffset_int[1] = value[1];
			translation_int[0] = value[0];
			translation_int[1] = value[1];

			currentView[3] = value[0];
			currentView[4] = value[1];

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_zoom(value, time) {
			zoomOffset_int[1] = value;
			translation_int[2] = value;

			currentView[5] = value;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function set_view(value,time) {
			activeView_out=activeView=-1;
			set_all_internal(value,0);
		}

		function set_activeView(value,time) {
			if(value>=nViews || value<0) print('NavigationPanel::set_activeView: invalid view');
			else set_all_internal(views,(activeView=value)*6);
		}

		function vpActive_in(value,time) {
			//Only need to bother if changing
			if(activeView!=value) {
				activeView_out=activeView=value;
				set_all_internal(views,value*6);
			}
		}

		function set_all_internal(value,offset,setviewchanged) {
			var i;

			rotationAngles_int=new SFVec2f(value[offset],value[offset+1]);
			rotationOffset_int=new SFVec3f(value[offset+1],value[offset]);
			horizontalRotation_int=new SFRotation(0,1,0,value[offset+1] * rotation_speed);
			verticalRotation_int=new SFRotation(1,0,0,-value[offset] * rotation_speed);

			panOffset_int=new SFVec3f(value[offset+3],value[offset+4]);
			zoomOffset_int[1] = value[offset+5];

			translation_int=panOffset_int.multiply(translation_speed);
			translation_int[2] = value[offset+5] * translation_speed;

			for(i=0; i<6; i++) currentView[i] = value[offset+i];

			angles_out=new SFVec2f(value[offset],value[offset+1]);
			pan_out=new SFVec2f(value[offset+3],value[offset+4]);
			zoom_out=value[offset+5];
			view_out=currentView;
		}

		function rotationTrans_in(value, time) {
			value=new SFVec2f(value[1],value[0]); // swap components/reduce to 2D
			angles_out = value;
			currentView[0] = value[0];
			currentView[1] = value[1];

			rotationAngles_int=value;

			horizontalRotation_int[3] = value[1] * rotation_speed;
			verticalRotation_int[3] = -value[0] * rotation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function panTrans_in(value, time) {
			value=new SFVec2f(value[0],value[1]);		// reduce to 2D
			pan_out=value;
			currentView[3] = value[0];
			currentView[4] = value[1];

			translation_int[0] = value[0] * translation_speed;
			translation_int[1] = value[1] * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function zoomTrans_in(value, time) {
			value=value[1];												// reduce to scalar
			zoom_out = value;
			currentView[5] = value;

			translation_int[2] = value * translation_speed;

			activeView_out=activeView=-1;
			view_out=currentView;
		}

		function isOver_in(value, time) { isOver_out = value; }
		function isActive_in(value, time) { isActive_out = value; }

		function switchActive_in(value, time) {
			if(!value) {
				visible = !visible;
				visible_out = visible;
				whichChoice_int = visible ? 0 : -1;
			}
		}"
	}

	ROUTE RotationTS.isOver TO Worker.isOver_in
	ROUTE RotationPS.isActive TO Worker.isActive_in
	ROUTE PanTS.isOver TO Worker.isOver_in
	ROUTE PanPS.isActive TO Worker.isActive_in
	ROUTE ZoomTS.isOver TO Worker.isOver_in
	ROUTE ZoomPS.isActive TO Worker.isActive_in

	ROUTE RotationPS.translation_changed TO Worker.rotationTrans_in
	ROUTE PanPS.translation_changed TO Worker.panTrans_in
	ROUTE ZoomPS.translation_changed TO Worker.zoomTrans_in

	ROUTE Worker.rotationOffset_int TO RotationPS.set_offset
	ROUTE Worker.panOffset_int TO PanPS.set_offset
	ROUTE Worker.zoomOffset_int TO ZoomPS.set_offset

	ROUTE Worker.horizontalRotation_int TO HorizontalTransform.set_rotation
	ROUTE Worker.verticalRotation_int TO VerticalTransform.set_rotation
	ROUTE Worker.translation_int TO TranslationTransform.set_translation

	ROUTE Worker.rotationAngles_int TO RotationIcon.set_angles

	ROUTE Worker.addChildren_int TO PanelGroup.addChildren

	ROUTE Worker.whichChoice_int TO PanelSwitch.whichChoice
	ROUTE Worker.visible_out TO SwitchIcon.set_on

	ROUTE SwitchTS.isActive TO Worker.switchActive_in
}
# -------------------------------------------------------------------
# End of NavigationPanel
# -------------------------------------------------------------------


#Proto for augmentation/replacement for headlight/navinfo:
PROTO NavLight [ exposedField SFFloat ambientIntensity 0.1
								 exposedField SFFloat intensity 1
								 exposedField SFColor color 1 1 1
								 exposedField SFVec3f attenuation 1 0 0
								 exposedField SFBool headlight FALSE
								 exposedField MFFloat avatarSize [ .25 1.6 .75 ]
								 exposedField SFFloat navigationSpeed 1
								 exposedField MFString navigationType ["WALK" "ANY"]
								 exposedField SFFloat visibilityLimit 0 ]
{
	DEF Fixture Transform {
		children [
			PointLight {
				ambientIntensity IS ambientIntensity
				intensity IS intensity
				color IS color
				attenuation IS attenuation
				radius 1e10
				location 0 0 0
			}
			NavigationInfo {
				avatarSize IS avatarSize
				type IS navigationType
				speed IS navigationSpeed
				visibilityLimit IS visibilityLimit
				headlight IS headlight
			}
		]
	}
	DEF PS ProximitySensor { size 1e10 1e10 1e10 }
	ROUTE PS.position_changed TO Fixture.set_translation
	ROUTE PS.orientation_changed TO Fixture.set_rotation
}

PROTO XDragWidget [ exposedField SFVec3f translation 0 0 0
										exposedField SFRotation rotation 0 0 1 0

										field SFFloat position 0
										eventIn SFFloat set_position
										eventOut SFFloat position_changed

										field SFFloat minPosition 0				#If minPosition > maxPosition, all values allowed
										eventIn SFFloat set_minPosition
										field SFFloat maxPosition 1
										eventIn SFFloat set_maxPosition

										field SFFloat value 0							#Only used if positionAsValue FALSE
										eventIn SFFloat set_value
										eventOut SFFloat value_changed

										field SFFloat minValue 0
										eventIn SFFloat set_minValue
										field SFFloat maxValue 1
										eventIn SFFloat set_maxValue

										#If this is TRUE (the default), the min/maxValue fields
										#are ignored and 'position' and 'value' are equivalent.
										#(This could probably have a better name.)
										field SFBool positionAsValue TRUE

										eventOut SFBool isOver_out
										eventOut SFBool isActive_out
										eventIn SFBool set_isActive

										exposedField SFBool enabled TRUE

										exposedField MFNode geometry []
										exposedField MFNode activeGeometry []
										field SFString debugName "<unnamed>"
										eventOut SFBool initialized ]
{
	Transform {
		translation IS translation
		rotation IS rotation
		children [
			TouchSensor {
				isOver IS isOver_out
				enabled IS enabled
			}
			DEF PS PlaneSensor {
				isActive IS isActive_out
				enabled IS enabled
			}
			DEF GeometryTransform Transform {
				children DEF GeometrySwitch Switch {
					whichChoice 0
					choice [ Group { children IS geometry }
									 Group { children IS activeGeometry } ]
				}
			}
		]
	}
	DEF Worker Script {
		field		SFFloat pos IS position
		eventIn SFFloat pos_in IS set_position
		eventOut SFFloat pos_out IS position_changed

		field		SFFloat minPos IS minPosition
		field		SFFloat maxPos IS maxPosition
		eventIn SFFloat set_minPosition IS set_minPosition
		eventIn SFFloat set_maxPosition IS set_maxPosition

		field SFFloat val IS value
		eventIn SFFloat val_in IS set_value
		eventOut SFFloat val_out IS value_changed

		field		SFFloat minVal IS minValue
		field		SFFloat maxVal IS maxValue
		eventIn SFFloat set_minValue IS set_minValue
		eventIn SFFloat set_maxValue IS set_maxValue

		field SFBool ignoreLogical IS positionAsValue

		eventIn SFVec3f ps_trans_in
		eventIn SFVec3f ps_offset_in
		field SFVec3f ps_offset 0 0 0

		eventOut SFVec3f offset_out
		eventOut SFVec2f maxPos_out
		eventOut SFVec2f minPos_out

		eventOut SFVec3f trans_out

		eventIn SFBool active_in IS set_isActive
		eventOut SFInt32 whichChoice_out
		field SFBool active FALSE

		field SFString name IS debugName

		field SFBool inited TRUE				#temp: for compatibility
		eventOut SFBool initialized IS initialized

		url "javascript:
		function initialize() {
			name='XDragWidget('+name+')::';
			//**/print(name+'initialize!');
			if(ignoreLogical) pos_in(pos,0);
			else val_in(val,0);

			set_maxPosition(maxPos,0);
			set_minPosition(minPos,0);

			inited=true;
			initialized=true;
		}

		function pos_in(value,time) {
			//**/print(name+'pos_in('+value+')');
			if(maxPos<minPos || value>=minPos && value<=maxPos) {
				//If the user is dragging the widget, they will have imparted some
				//'delta-pos' to it (equal to the PS's translation_out minus its
				//offset, which is the translation it had at the start of the drag).
				//We thus set the offset so that it plus the delta-pos gives the value
				//parameter.  This has the effect of sliding the widget within the
				//user's grasp without them letting go of it.
				offset_out[0]=value-(active?pos-ps_offset[0]:0);
				set_trans_internal(value);
			} else print(/*'XDragWidget::'*/name+'pos_in: value '+value+' out of range ['+minPos+', '+maxPos+']');
		}

		function ps_trans_in(value,time) {set_trans_internal(value[0]);}
		function ps_offset_in(value,time) {ps_offset=value;}

		function set_trans_internal(value) {
			pos=value;
			trans_out[0]=pos;
			if(inited) {
				//**/print(name+'pos_out -> '+value);
				pos_out=pos;
				val_out=ignoreLogical?pos:xlate(minPos,maxPos,minVal,maxVal,pos);
			}
		}

		function val_in(value,time) {
			if(!ignoreLogical && (value<minVal && value<maxVal || value>minVal && value>maxVal))
				print(/*'XDragWidget::'*/name+'val_in: value '+value+' out of range ['+minVal+', '+maxVal+']');
			else pos_in(ignoreLogical?value:xlate(minVal,maxVal,minPos,maxPos,value),time);
		}

		function xlate(x1,x2,y1,y2,x) {return y1+(x-x1)/(x2-x1)*(y2-y1);}

		function active_in(value,time) {whichChoice_out=(active=value)?1:0;}

		//Setting the second values to 0 clamps the translation in the y
		//direction, so motion occurs only in x.  We also adjust the current
		//value if it's outside the new bounds.
		function set_minPosition(value,time) {
			//**/print(name+'set_min('+value+')');
			var oldMin=minPos;
			minPos_out=new SFVec2f(minPos=value,0);
			if(ignoreLogical) {
				if(maxPos>=minPos && pos<minPos) pos_in(minPos,time);
			} else pos_in(xlate(oldMin,maxPos,minPos,maxPos,pos),time);
		}
		function set_maxPosition(value,time) {
			//**/print(name+'set_max('+value+')');
			var oldMax=maxPos;
			maxPos_out=new SFVec2f(maxPos=value,0);
			if(ignoreLogical) {
				if(maxPos>=minPos && pos>maxPos) pos_in(maxPos,time);
			} else pos_in(xlate(minPos,oldMax,minPos,maxPos,pos),time);
		}
		//There is no 'value' state, and as such these functions are very simple.
		function set_minValue(value,time) {minVal=value;}
		function set_maxValue(value,time) {maxVal=value;}"
	}
	ROUTE PS.translation_changed TO Worker.ps_trans_in
	ROUTE PS.offset_changed TO Worker.ps_offset_in
	ROUTE PS.isActive TO Worker.active_in
	ROUTE Worker.whichChoice_out TO GeometrySwitch.whichChoice
	ROUTE Worker.trans_out TO GeometryTransform.set_translation
	ROUTE Worker.offset_out TO PS.set_offset
	ROUTE Worker.maxPos_out TO PS.maxPosition
	ROUTE Worker.minPos_out TO PS.minPosition
}
PROTO XColorCone [ exposedField SFNode material Material {}
									 exposedField SFVec3f coneScale 1 1 1 ]
{
	Transform {
		rotation 0 0 1 -1.570796
		scale IS coneScale
		children Shape {
				appearance Appearance {
						material IS material
					}
				geometry Cone {
						bottomRadius 0.5
						height 2
					}
			}
	}
}
PROTO RedXCone [ exposedField SFVec3f coneScale 1 1 1 ]
{
	XColorCone {
		material Material { diffuseColor .4 0 0 emissiveColor .25 0 0 }
		coneScale IS coneScale
	}
}
PROTO ActiveRedXCone [ exposedField	SFVec3f	coneScale 1 1 1 ]
{
	XColorCone {
		material Material { diffuseColor .75 0 0 emissiveColor .3 0 0 }
		coneScale IS coneScale
	}
}
PROTO RedConeXDragger [ exposedField SFVec3f coneScale 1 1 1
												exposedField SFVec3f translation 0 0 0
												exposedField SFRotation rotation 0 0 1 0

												field SFFloat position 0
												eventIn SFFloat set_position
												eventOut SFFloat position_changed
												field SFFloat minPosition 0
												eventIn SFFloat set_minPosition
												field SFFloat maxPosition 1
												eventIn SFFloat set_maxPosition
												field SFFloat value 0
												eventIn SFFloat set_value
												eventOut SFFloat value_changed
												field SFFloat minValue 0
												eventIn SFFloat set_minValue
												field SFFloat maxValue 1
												eventIn SFFloat set_maxValue
												field SFBool positionAsValue TRUE

												eventOut SFBool isOver_out
												eventOut SFBool isActive_out
												eventIn SFBool set_isActive

												exposedField SFBool enabled TRUE
												field SFString debugName "<unnamed>"
												eventOut SFBool initialized ]
{
	XDragWidget {
		translation IS translation
		rotation IS rotation
		position IS position
		set_position IS set_position
		position_changed IS position_changed
		minPosition IS minPosition
		set_minPosition IS set_minPosition
		maxPosition IS maxPosition
		set_maxPosition IS set_maxPosition
		value IS value
		set_value IS set_value
		value_changed IS value_changed
		minValue IS minValue
		set_minValue IS set_minValue
		maxValue IS maxValue
		set_maxValue IS set_maxValue
		positionAsValue IS positionAsValue
		isOver_out IS isOver_out
		isActive_out IS isActive_out
		set_isActive IS set_isActive
		enabled IS enabled
		geometry RedXCone { coneScale IS coneScale }
		activeGeometry ActiveRedXCone { coneScale IS coneScale }
		debugName IS debugName
		initialized IS initialized
	}
}
PROTO RotationWidget [
	field SFFloat angle 0
	eventIn SFFloat set_angle
	eventOut SFFloat angle_changed
	#rotation_changed is provided for convenience; will always be (0,0,1,angle_changed)
	eventOut SFRotation rotation_changed

	field SFFloat minAngle 0			#If minAngle > maxAngle (as here), all angles allowed
	eventIn SFFloat set_minAngle
	field SFFloat maxAngle -1
	eventIn SFFloat set_maxAngle

	field SFFloat value 0
	eventIn SFFloat set_value
	eventOut SFFloat value_changed

	field SFFloat minValue 0
	eventIn SFFloat set_minValue
	field SFFloat maxValue 1
	eventIn SFFloat set_maxValue

	#If this is TRUE (the default), the min/maxValue fields
	#are ignored and 'angle' and 'value' are equivalent.
	#(This could probably have a better name.)
	field SFBool angleAsValue TRUE

	eventOut SFBool isActive_out
	eventOut SFBool isOver_out
	#Invoking the following set_ events affects which geometry is displayed.
	eventIn SFBool set_isActive
	eventIn SFBool set_isOver

	exposedField SFBool enabled TRUE

	field MFNode normalGeometry []
	field MFNode overGeometry []
	field MFNode activeGeometry []
	eventOut SFBool initialized
]
{
	Group {
		children [
			DEF TS TouchSensor {
				enabled IS enabled
				isOver IS isOver_out
			}
			DEF PS PlaneSensor {
				enabled IS enabled
				isActive IS isActive_out
			}
			DEF RotationalTransform Transform {
				children DEF GeometrySwitch Switch {
					whichChoice 0
					choice [
						Group { children IS normalGeometry }
						Group { children IS overGeometry }
						Group { children IS activeGeometry }
					]
				}
			}
		]
	}

	DEF Worker Script {
		field SFFloat minAngle IS minAngle
		eventIn SFFloat set_minAngle IS set_minAngle

		field SFFloat maxAngle IS maxAngle
		eventIn SFFloat set_maxAngle IS set_maxAngle

		field SFFloat angle0 IS angle
		eventIn SFFloat set_angle IS set_angle
		eventOut SFFloat angle_changed IS angle_changed
		field SFRotation rotation 0 0 1 0
		eventOut SFRotation rotation_changed IS rotation_changed

		field SFFloat val0 IS value
		eventIn SFFloat val_in IS set_value
		eventOut SFFloat val_out IS value_changed

		field		SFFloat minVal IS minValue
		field		SFFloat maxVal IS maxValue
		eventIn SFFloat set_minValue IS set_minValue
		eventIn SFFloat set_maxValue IS set_maxValue

		field SFBool ignoreLogical IS angleAsValue

		eventIn SFVec3f ps_trans_in
		eventIn SFVec3f ts_hitPoint_in
		eventIn SFBool ts_active_in

		eventOut SFVec3f offset_out

		eventIn SFBool set_isActive IS set_isActive
		eventIn SFBool set_isOver IS set_isOver		#Also used by TS

		field SFBool firstHitPoint FALSE

		#The current angle of the widget (between drags or individual mouse-moves) is
		#represented as N*(2Pi)+theta; spins holds N and curTheta holds theta.
		field SFInt32 spins 0
		field SFFloat curTheta 0

		#These keep up with the user's attempt to go past pegging the widget:
		#inputTheta is unclamped, inputSpins is clamped to maximum useful spins + 1
		field SFFloat inputTheta 0
		field SFInt32 inputSpins 0
		#This still isn't perfect for widgets with non-x-axis stop points... [?]

		#The angle from the widget's x-axis at which the user grabbed it must be considered...
		field SFFloat grabDelta 0

		#Memory of mouse activity (for selecting which geometry to display)
		field SFBool isActive FALSE
		field SFBool isOver FALSE
		eventOut SFInt32 whichChoice_changed

		field MFNode overGeometry IS overGeometry
		field MFNode activeGeometry IS activeGeometry

		field SFBool inited TRUE				#temp: for compatibility
		eventOut SFBool initialized IS initialized

		url "javascript:
		function initialize() {
			if(ignoreLogical) set_angle(angle0,0);
			else val_in(val0,0);

			inited=true;
			initialized=true;
		}

		function ps_trans_in(value,time) {
			var theta = Math.atan2(value[1], value[0])-grabDelta;
			while(theta<0) theta += 2*Math.PI;

			//Discard extra spins when crossing the maxAngle/minAngle point
			var angle=currentAngle0(theta,spins);
			//print('theta: '+theta+'\tangle: '+angle+'\ninputSpins0: '+inputSpins+'\tspins0: '+spins);

			if(theta<Math.PI/2 && inputTheta>=Math.PI*3/2) {
				if(inputSpins<=spins) inputSpins++;		//Extra extra spins are ignored
			} else if(theta>=Math.PI*3/2 && inputTheta<Math.PI/2) {
				if(inputSpins>=spins) inputSpins--;
			} else if(minAngle<maxAngle && ((angle<minAngle && inputSpins<spins) ||
																			(angle>maxAngle && inputSpins>spins))) {
				//print('(a<min & i<s) | (a>max & i>s)');
				inputSpins=spins;
			}

			inputTheta=theta;
			angle=currentAngle0(theta,inputSpins);

			//print('inputSpins\': '+inputSpins+'\tangle2: '+angle);
			//Discard invalid values if min and max angles set
			if(minAngle<=maxAngle && (angle<minAngle || angle>maxAngle)) {
				//print('!denied!');
				var lastAngle=currentAngle();
				//When first crossing the line, peg the widget
				if(lastAngle!=minAngle && lastAngle!=maxAngle)
					set_angle((angle<minAngle)?minAngle:maxAngle,time);
				return;
			}

			//print('accepted\n\n');
			//Otherwise, update the widget
			spins=inputSpins;
			curTheta = theta;
			send_events(angle);
		}

		//Davis: I'm not sure of the safety of calling this from
		//the outside while a drag is going on.  So don't.
		function set_angle(value,time) {
			if(minAngle>=maxAngle || (value>=minAngle && value<=maxAngle)) {
				send_events(value);
				curTheta = value;
				spins=0;
				//Unfortunately, we now have to work curTheta into the [0,2*PI) interval.
				while(curTheta>=2*Math.PI) {curTheta-=2*Math.PI; spins++;}
				while(curTheta<0) {curTheta+=2*Math.PI; spins--;}
				if(!isActive) {
					inputTheta=curTheta;
					inputSpins=spins;
				}
			} else
			print('RotationWidget::set_angle: angle '+value+' out of range ['+minAngle+', '+maxAngle+']');
		}

		function send_events(angle) {
			rotation[3] = angle;
			if(inited) {
				angle_changed = angle;
				val_out = ignoreLogical?angle:xlate(minAngle,maxAngle,minVal,maxVal,angle);
				rotation_changed=rotation;
			}
		}

		function val_in(value,time) {
			if(!ignoreLogical && (value<minVal && value<maxVal || value>minVal && value>maxVal))
				print('RotationWidget::val_in: value '+value+' out of range ['+minVal+', '+maxVal+']');
			else set_angle(ignoreLogical?value:xlate(minVal,maxVal,minAngle,maxAngle,value),time);
		}

		function xlate(x1,x2,y1,y2,x) {return y1+(x-x1)/(x2-x1)*(y2-y1);}

		function set_minAngle(value,time) {
			var oldMin=minAngle;
			minAngle = value;
			if(ignoreLogical) {
				if(minAngle<=maxAngle && currentAngle()<minAngle)	//Need to clamp angle
					set_angle(minAngle,time);
			} else
				set_angle(xlate(oldMin,maxAngle,minAngle,maxAngle,currentAngle()),time);
		}
		function set_maxAngle(value,time) {
			var oldMax=maxAngle;
			maxAngle = value;
			if(ignoreLogical) {
				if(minAngle<=maxAngle && currentAngle()>maxAngle)	//Need to clamp angle
					set_angle(maxAngle,time);
			} else
				set_angle(xlate(minAngle,oldMax,minAngle,maxAngle,currentAngle()),time);
		}

		//There is no 'value' state, and as such these functions are very simple.
		function set_minValue(value,time) {minVal=value;}
		function set_maxValue(value,time) {maxVal=value;}

		function currentAngle() {return currentAngle0(curTheta,spins);}
		function currentAngle0(angle,s) {return angle+s*2*Math.PI;}

		function ts_hitPoint_in(value,time) {
			if(firstHitPoint) {
				firstHitPoint = false;
				offset_out[0] = value[0];
				offset_out[1] = value[1];
				grabDelta = Math.atan2(value[1], value[0]) - curTheta;
				if(grabDelta<0) grabDelta += Math.PI*2;
			}
		}

		function ts_active_in(value,time) {
			if(value)
				firstHitPoint = true;
			else {
				//Overwrite mouse-tracking data with real data
				inputSpins=spins;
				inputTheta=curTheta;
			}
			set_isActive(value,time);
		}

		function set_isActive(value,time) {
			isActive = value;
			if(value) {
				if(activeGeometry.length > 0) whichChoice_changed = 2;
			} else {
				if(isOver && overGeometry.length > 0) whichChoice_changed = 1;
				else whichChoice_changed = 0;
			}
		}

		function set_isOver(value,time) {
			isOver = value;
			if(value) {
				if(!isActive && overGeometry.length > 0) whichChoice_changed = 1;
			} else {
				if(isActive && activeGeometry.length > 0) whichChoice_changed = 2;
				else whichChoice_changed = 0;
			}
		}"
	}

	ROUTE TS.hitPoint_changed TO Worker.ts_hitPoint_in
	ROUTE TS.isActive TO Worker.ts_active_in
	ROUTE TS.isOver TO Worker.set_isOver
	ROUTE PS.translation_changed TO Worker.ps_trans_in
	ROUTE Worker.rotation_changed TO RotationalTransform.set_rotation
	ROUTE Worker.offset_out TO PS.set_offset
	ROUTE Worker.whichChoice_changed TO GeometrySwitch.set_whichChoice
}
PROTO WheelWidget [
	field SFFloat value 550
	eventIn SFFloat set_value
	eventOut SFFloat value_changed

	field SFFloat minValue 400
	eventIn SFFloat set_minValue
	field SFFloat maxValue 700
	eventIn SFFloat set_maxValue

	field SFFloat maxRotations 8
	eventIn SFFloat set_maxRotations

	field SFBool angleAsValue FALSE

	eventOut SFBool isActive_out
	eventOut SFBool isOver_out
	eventIn SFBool set_isActive

	exposedField SFBool enabled TRUE

	exposedField SFNode	 material Material { diffuseColor 0 1 1 emissiveColor 0 0.1 0.1 }
	exposedField SFNode	 activeMaterial Material { diffuseColor 1 1 0 }
	field SFString debugName "<unnamed>"
	eventOut SFBool initialized
]
{
	Transform {
		rotation 1 0 0 1.570796	 #(X,Y,Z) -> (X,Z,-Y)
		children DEF RW RotationWidget {
			angle IS value		#Only one of these will be actually used
			value IS value
			set_value IS set_value
			value_changed IS value_changed
			minValue IS minValue
			set_minValue IS set_minValue
			maxValue IS maxValue
			set_maxValue IS set_maxValue
			angleAsValue IS angleAsValue
			isActive_out IS isActive_out
			isOver_out IS isOver_out
			set_isActive IS set_isActive
			enabled IS enabled
			normalGeometry WavelengthWheel { material IS material }
			activeGeometry WavelengthWheel { material IS activeMaterial }
		}
	}
	DEF Worker Script {
		field			SFFloat	 maxRotations IS maxRotations
		eventIn		SFFloat	 set_maxRotations IS set_maxRotations

		eventOut SFFloat maxAngle_out

		field SFString name IS debugName

		eventOut SFBool initialized IS initialized
		eventIn SFBool rw_init
		field SFBool inited TRUE				#temp: for compatibility
		field SFBool rw_inited FALSE

		url "javascript:
		function initialize() {
			name='WheelWidget('+name+')::';
			//print(name+'initialize!');
			//print('mxR: '+maxRotations);

			set_maxRotations(maxRotations);

			inited=true;
			maybe_init();
		}
		function rw_init(value,time) {rw_inited=true; maybe_init();}
		//Wait for both scripts to come alive before declaring success:
		function maybe_init() {if(inited && rw_inited) initialized=true;}

		function set_maxRotations(value,time) {
			maxAngle_out = maxRotations * 2 * Math.PI;
		}"
	}
	ROUTE Worker.maxAngle_out TO RW.set_maxAngle
}

EXTERNPROTO GreyNYCone [
	exposedField SFVec3f coneScale
]
"../vrmllib/Widgets.wrl#GreyNYCone"

##############################################################################
# NSlitDragger
##############################################################################
PROTO NSlitDragger [
	#Oddly enough, this file doesn't use the following three values.
	#classes FraunNSlit and NSlitDragger do, though, to talk to each other.
	exposedField SFInt32 n 3
	exposedField SFFloat width 40
	exposedField SFFloat distance 220

	exposedField SFInt32 dd_on 0

	eventIn SFFloat set_max_wd_position
	field   SFFloat max_wd_position 499

	eventIn SFFloat set_min_wd_position
	field   SFFloat min_wd_position 0

	eventIn SFFloat set_max_dd_position
	field   SFFloat max_dd_position 499

	eventIn SFFloat set_min_dd_position
	field   SFFloat min_dd_position 0

	field    SFFloat wd_position 240
	eventIn  SFFloat set_wd_position
	eventOut SFFloat wd_position_changed

	field    SFFloat dd_position 220
	eventIn  SFFloat set_dd_position
	eventOut SFFloat dd_position_changed

	eventOut SFBool wd_isOver_changed
	eventOut SFBool wd_isActive_changed

	eventOut SFBool dd_isOver_changed
	eventOut SFBool dd_isActive_changed ]
{
#These protos were copied from the March 10 2002 version of vrmllib/Widgets.wrl.
#(Blaxxun Contact 5 has issues with certain kinds of nested PROTO definitions.)
	PROTO NSD_XDragWidget [ exposedField SFVec3f translation 0 0 0		#Of geometry
													exposedField SFRotation rotation 0 0 1 0	#Of whole widget

													field SFFloat position 0
													eventIn SFFloat set_position
													eventOut SFFloat position_changed
													eventOut SFFloat inversePosition_out

													field SFFloat minPosition 0
													eventIn SFFloat set_minPosition
													field SFFloat maxPosition 1
													eventIn SFFloat set_maxPosition

													eventOut SFBool isOver_out
													eventOut SFBool isActive_out
													eventIn SFBool set_isActive

													exposedField SFBool enabled TRUE

													exposedField MFNode geometry Group {}
													exposedField MFNode activeGeometry Group {} ]
	{
		Transform {
			rotation IS rotation
			children [
				TouchSensor {
					isOver IS isOver_out
					enabled IS enabled
				}
				DEF PS PlaneSensor {
					isActive IS isActive_out
					enabled IS enabled
				}
				Transform {
					translation IS translation
					children DEF GEOM_XFORM Transform {
						children [
							DEF GEOM_SWITCH Switch {
								whichChoice 0
								choice [ Group { children IS geometry }
												 Group { children IS activeGeometry } ]
							}
						]
					}
				}
			]
		}
		DEF XDRAG_SCRIPT Script {
			field 	SFFloat startPos IS position
			eventIn SFFloat pos_in   IS set_position
			eventOut SFFloat pos_out IS position_changed
			eventOut SFFloat inv_out IS inversePosition_out

			eventIn SFVec3f ps_trans_in

			field 	SFFloat maxPos IS maxPosition
			field 	SFFloat minPos IS minPosition
			eventIn SFFloat set_maxPosition IS set_maxPosition
			eventIn SFFloat set_minPosition IS set_minPosition

			eventIn SFBool active_in IS set_isActive

			eventOut SFInt32 whichChoice_out

			eventOut SFVec3f offset_out
			eventOut SFVec2f maxPos_out
			eventOut SFVec2f minPos_out
			eventIn SFVec3f ps_offset_in

			eventOut SFVec3f geom_trans_out

			url "vrmlscript:
			function initialize() {
				set_maxPosition(maxPos,null);
				set_minPosition(minPos,null);

				pos_in(startPos,null);
			}

			function pos_in(value, time)
			{ set_trans_internal(value);
				offset_out[0] = value - whichChoice_out*(ps_trans_in[0]-ps_offset_in[0]);}

			function ps_trans_in(value, time)
			{ set_trans_internal(value[0]);}

			function set_trans_internal(value)
			{ geom_trans_out[0] = value;
				inv_out = -(pos_out=value);}

			function active_in(value,time) { whichChoice_out=value?1:0; }

			// setting the second values to 0 clamps the translation in the
			// y direction, so motion occurs only in x.
			function set_maxPosition(value,time) { maxPos_out = new SFVec2f(value,0); }
			function set_minPosition(value,time) { minPos_out = new SFVec2f(value,0); }"
		}
		ROUTE PS.translation_changed TO XDRAG_SCRIPT.ps_trans_in
		ROUTE	PS.offset_changed TO XDRAG_SCRIPT.ps_offset_in
		ROUTE PS.isActive TO XDRAG_SCRIPT.active_in
		ROUTE XDRAG_SCRIPT.whichChoice_out TO GEOM_SWITCH.whichChoice
		ROUTE XDRAG_SCRIPT.geom_trans_out TO GEOM_XFORM.set_translation
		ROUTE XDRAG_SCRIPT.offset_out	TO PS.set_offset
		ROUTE XDRAG_SCRIPT.maxPos_out TO PS.maxPosition
		ROUTE XDRAG_SCRIPT.minPos_out TO PS.minPosition
	}

	PROTO NSD_XColorCone [ exposedField SFNode material Material {}
										 exposedField SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			rotation 0 0 1 -1.570796
			scale IS coneScale
			children Shape {
					appearance Appearance {
							material IS material
						}
					geometry Cone {
							bottomRadius 0.5
							height 2
						}
				}
		}
	}

	PROTO NSD_TwoXColorCone [ exposedField SFNode material Material {}
												exposedField SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			scale IS coneScale
			children [
				Transform {
					translation 1 0 0
					children NSD_XColorCone { material IS material }
				}
				Transform {
					translation -1 0 0
					rotation 0 1 0 3.141592654
					children NSD_XColorCone { material IS material }
				}
			]
		}
	}

	PROTO NSD_NegYColorCone [ exposedField SFNode coneMaterial Material {}
												exposedField SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			scale IS coneScale
			children Transform {
				translation 0 6 0
				rotation 1 0 0  3.141592654
				children Shape {
					appearance Appearance {
						material IS coneMaterial
					}
					geometry Cone { bottomRadius 0.5 }
				}
			}
		}
	}

	#Colors of cones:

	PROTO NSD_Red2XCone [ exposedField SFVec3f coneScale 1 1 1 ]
	{
		NSD_TwoXColorCone {
			material Material { diffuseColor .5 0 0 }
			coneScale IS coneScale
		}
	}
	PROTO NSD_ActiveRed2XCone [ exposedField SFVec3f coneScale 1 1 1 ]
	{
		NSD_TwoXColorCone {
			material Material { diffuseColor 1 0 0 }
			coneScale IS coneScale
		}
	}

	PROTO NSD_BlueNYCone [ exposedField SFVec3f coneScale 1 1 1 ]
	{
		NSD_NegYColorCone {
			coneMaterial Material { diffuseColor 0 0 .5 }
			coneScale IS coneScale
		}
	}
	PROTO NSD_ActiveBlueNYCone [ exposedField SFVec3f coneScale 1 1 1 ]
	{
		NSD_NegYColorCone {
			coneMaterial Material { diffuseColor 0 0 1 }
			coneScale IS coneScale
		}
	}

	Group {
		children [
			########################################################################
			# Width Draggers

			#This is the one on the right
			# translation 0 150 0 # -500
			DEF wd NSD_XDragWidget {
				# minPosition 19.9
				# maxPosition 0
				position IS wd_position
				set_position IS set_wd_position
				position_changed IS wd_position_changed
				isOver_out IS wd_isOver_changed
				isActive_out IS wd_isActive_changed
				geometry NSD_Red2XCone { coneScale 25 25 25 }
				activeGeometry NSD_ActiveRed2XCone { coneScale 25 25 25 }
			}

			#Cheat cheat cheat!  The one on the left is actually the same dragger.
			Transform {
				rotation 0 1 0 3.14159265
				children USE wd
			}

			########################################################################
			# Distance Draggers
			DEF dd_SWITCH Switch {
				whichChoice IS dd_on
				choice [
					Group {
						children [
							#This is the one on the right.
							DEF dd NSD_XDragWidget {
								# minPosition 19.9
								# maxPosition 0
								position IS	dd_position
								set_position IS set_dd_position
								position_changed IS dd_position_changed
								isOver_out IS dd_isOver_changed
								isActive_out IS dd_isActive_changed
								geometry NSD_BlueNYCone { coneScale 25 25 25 }
								activeGeometry NSD_ActiveBlueNYCone { coneScale 25 25 25 }
							}

							#Cheating again
							Transform {
								rotation 0 1 0 3.14159265
								children USE dd
							}
						]
					}
				]
			}

			DEF CONTROL_MIN_MAX Script {
				field    SFFloat minWidth IS min_wd_position
				eventIn  SFFloat set_minWidth IS set_min_wd_position
				eventOut SFFloat minWidth_changed

				field    SFFloat maxWidth IS max_wd_position
				eventIn  SFFloat set_maxWidth IS set_max_wd_position
				eventOut SFFloat maxWidth_changed

				field    SFFloat minDistance IS min_dd_position
				eventIn  SFFloat set_minDistance IS set_min_dd_position
				eventOut SFFloat minDistance_changed

				field    SFFloat maxDistance IS max_dd_position
				eventIn  SFFloat set_maxDistance IS set_max_dd_position
				eventOut SFFloat maxDistance_changed

				url "javascript:
				function initialize() {
					minWidth_changed = minWidth;
					maxWidth_changed = maxWidth;
					minDistance_changed = minDistance;
					maxDistance_changed = maxDistance;
				}

				function set_minWidth(value, time) {
					minWidth_changed = value;
				}

				function set_maxWidth(value, time) {
					maxWidth_changed = value;
				}

				function set_minDistance(value, time) {
					minDistance_changed = value;
				}

				function set_maxDistance(value, time) {
					maxDistance_changed = value;
				}"
			}
		]
	}

	############################################################################
	# The minimums and maximums for the widgets
	############################################################################
	ROUTE CONTROL_MIN_MAX.minWidth_changed TO wd.set_minPosition
	ROUTE CONTROL_MIN_MAX.maxWidth_changed TO wd.set_maxPosition

	ROUTE CONTROL_MIN_MAX.minDistance_changed TO dd.set_minPosition
	ROUTE CONTROL_MIN_MAX.maxDistance_changed TO dd.set_maxPosition
}

##############################################################################
# Viewpoints
##############################################################################
#DEF Home Viewpoint {
#  position    700 500 800
#  orientation -0.568136 0.813853 0.121918, 0.580938
#  description "Home"
#}

#DEF camera Viewpoint {
#  position    0.047699 -3.8147e-05 1686.31
#  orientation 0 0 1  0
#  fieldOfView 0.785398
#  description "camera"
#}
##############################################################################

NavLight { navigationType "NONE" }

DEF NavPanel NavigationPanel {
	translation_speed 100
	center 0 0 -500
	views [ -0.3 -0.4 0		0			-2		-12,
					-0.4  0   0		0			-2		-12,
					-0.048  0 0		0.055 -2.55 1 ]
	children [
		##########################################################################
		# Warning text
		##########################################################################
		DEF warningText Switch {
			whichChoice 0
			choice [
				Billboard {
					axisOfRotation 0 0 0
					children [
						Transform {
							translation -250 0 150
							children [
								Shape {
									appearance Appearance {
										material Material {
											diffuseColor 0 0 0    # black
											specularColor 0 0 0   # black
											ambientIntensity 0.0  # black
											shininess 0.0         # none
											emissiveColor 1 0 0
										}
									}
									geometry Text {
										string "Loading... Please wait."
										fontStyle FontStyle {
											size 120
										}
									}
								}
							]
						}
					]
				}
			]
		}
		##########################################################################

		##########################################################################
		# Bounding Box
		##########################################################################
		Inline {
			url "../vrmllib/BoundingBox.wrl"
			bboxSize 1000 300 1000
			bboxCenter 0 0 -500
		}

		##########################################################################
		# N-Slit Dragger
		##########################################################################
		DEF nslitDraggerSwitch Switch {
			whichChoice 0
			choice
				DEF nslitDragger NSlitDragger {}
		}

		##########################################################################
		# Wavelength wheel dragger
		##########################################################################
		DEF wavelengthWidgetSwitch Switch {
			whichChoice 0
			choice [
				Transform {
					scale 75 75 75
					translation 0 -30 220
					children DEF wavelengthWidget WheelWidget { }
				}
			]
		}

		##########################################################################
		# Wave lines and the light symbol
		##########################################################################
		Transform {
			translation    0 50 300
			rotation    0 1 0  1.5707963
			children [
				Group {
					children [
						Shape {
							appearance Appearance {
								material DEF _DefMat Material {
									emissiveColor 0 0.7 0.7
								}
							}
							geometry IndexedLineSet {
								coord Coordinate {
									point    [ 0 0 0,
										1.4411 4.21593 0,
										2.88219 8.09198 0,
										4.32329 11.3156 0,
										5.76439 13.627 0,
										7.20549 14.8398 0,
										8.64659 14.8561 0,
										10.0877 13.6748 0,
										11.5288 11.391 0,
										12.9699 8.18878 0,
										14.411 4.32642 0,
										15.8521 0.115254 0,
										17.2932 -4.1052 0,
										18.7343 -7.99469 0,
										20.1754 -11.2396 0,
										21.6165 -13.5784 0,
										23.0576 -14.8225 0,
										24.4987 -14.8716 0,
										25.9398 -13.7217 0,
										27.3809 -11.4656 0,
										28.8219 -8.28511 0,
										30.263 -4.43665 0,
										31.7041 -0.230501 0,
										33.1452 3.99423 0,
										34.5863 7.89693 0,
										36.0274 11.163 0,
										37.4685 13.5291 0,
										38.9096 14.8044 0,
										40.3507 14.8862 0,
										41.7918 13.7679 0,
										43.2329 11.5396 0,
										44.674 8.38095 0,
										46.1151 4.54661 0,
										47.5562 0.345738 0,
										48.9973 -3.88301 0,
										50.4384 -7.79872 0,
										51.8795 -11.0857 0,
										53.3206 -13.4789 0,
										54.7617 -14.7854 0,
										56.2028 -14.9 0,
										57.6439 -13.8132 0,
										59.085 -11.6129 0,
										60.5261 -8.47628 0,
										61.9672 -4.65631 0,
										63.4083 -0.460947 0,
										64.8494 3.77157 0,
										66.2905 7.70003 0,
										67.7316 11.0077 0,
										69.1727 13.4279 0,
										70.6138 14.7656 0,
										72.0549 14.9128 0,
										73.496 13.8578 0,
										74.9371 11.6855 0,
										76.3782 8.57112 0,
										77.8193 4.76574 0,
										79.2604 0.576144 0,
										80.7015 -3.6599 0,
										82.1425 -7.60088 0,
										83.5836 -10.9291 0,
										85.0247 -13.3762 0,
										86.4658 -14.7448 0,
										87.9069 -14.9248 0,
										89.348 -13.9015 0,
										90.7891 -11.7574 0,
										92.2302 -8.66545 0,
										93.6713 -4.87488 0,
										95.1124 -0.691292 0,
										96.5535 3.54803 0,
										97.9946 7.5013 0,
										99.4357 10.8498 0,
										100.877 13.3236 0,
										102.318 14.7232 0,
										103.759 14.9359 0,
										105.2 13.9443 0,
										106.641 11.8286 0,
										108.082 8.75926 0,
										109.523 4.98373 0,
										110.965 0.8064 0,
										112.406 -3.43594 0,
										113.847 -7.40128 0,
										115.288 -10.7699 0,
										116.729 -13.2703 0,
										118.17 -14.7008 0,
										119.611 -14.9461 0,
										121.052 -13.9864 0,
										122.493 -11.8991 0,
										123.934 -8.85256 0,
										125.375 -5.09229 0,
										126.817 -0.921459 0,
										128.258 3.32365 0,
										129.699 7.30081 0,
										131.14 10.6894 0,
										132.581 13.2161 0,
										134.022 14.6774 0,
										135.463 14.9554 0,
										136.904 14.0276 0,
										138.345 11.969 0,
										139.786 8.94537 0,
										141.228 5.20057 0,
										142.669 1.03649 0,
										144.11 -3.21114 0,
										145.551 -7.19992 0,
										146.992 -10.6082 0,
										148.433 -13.1612 0,
										149.874 -14.6532 0,
										151.315 -14.9638 0,
										152.756 -14.0681 0,
										154.197 -12.0381 0,
										155.639 -9.03762 0,
										157.08 -5.30852 0 ]
								}
								coordIndex    [ 0, 1, 2, 3, 4, 5, 6, 7,
									8, 9, 10, 11, 12, 13, 14, 15,
									16, 17, 18, 19, 20, 21, 22, 23,
									24, 25, 26, 27, 28, 29, 30, 31,
									32, 33, 34, 35, 36, 37, 38, 39,
									40, 41, 42, 43, 44, 45, 46, 47,
									48, 49, 50, 51, 52, 53, 54, 55,
									56, 57, 58, 59, 60, 61, 62, 63,
									64, 65, 66, 67, 68, 69, 70, 71,
									72, 73, 74, 75, 76, 77, 78, 79,
									80, 81, 82, 83, 84, 85, 86, 87,
									88, 89, 90, 91, 92, 93, 94, 95,
									96, 97, 98, 99, 100, 101, 102, 103,
									104, 105, 106, 107, 108, 109, -1 ]
							}
						}
					]
				}
				Transform {
					translation    35 50 0
					rotation    0 -1 0  1.5707963
					scale    10 10 10
					children [
						Inline {
							#url    "LightSource.wrl"
							# bboxSize    3 3.00009 14
							# bboxCenter    0 2.5034e-05 -4
						}
					]
				}
			]
		}

		##########################################################################
		# Screen distance dragger
		##########################################################################
		DEF screenDraggerSwitch Switch {
			whichChoice 0
			choice [

				Transform {
					translation 0 150 0 # -500
					scale	.5 .5 .5
					#rotation 0 1 0 1.5707963
					rotation -1 1 1 2.1		#a vector (X,Y,Z) without -> (-Y,Z,-X) with
					children [
						DEF screenDragger RedConeXDragger {
							coneScale 50 50 50
							minPosition 1000
							maxPosition 2000
							position 1000
						}
					]
				}
			]
		}

		##########################################################################
		# Screen box
		##########################################################################
		DEF screenMover Transform {
			translation 0 0 -1000
			children [
				Shape {
					appearance Appearance {
						material Material { diffuseColor 1 1 0 }
					}
					geometry IndexedFaceSet {
						coord Coordinate {
							point [
								500 -150 -10,
								-500 -150 -10,
								-500  150 -10,
								500  150 -10,
								500 -150   0,
								-500 -150   0,
								-500  150   0,
								500  150   0,
							]
						}
						coordIndex [
							0, 1, 2, 3, -1, # back
							1, 5, 6, 2, -1, # left
							0, 3, 7, 4, -1, # right
							3, 2, 6, 7, -1, # top
							0, 4, 5, 1, -1, # bottom
						]
					}
				}
			]
		}

		##########################################################################
		# The actual observation screen geometry + color
		##########################################################################
		Transform {
			translation 0 -150 0 # -482  # moveScreen + 18
			children
			DEF screenMeshMover Transform {
				translation 0 0 -1000
				children [
					Group {				#To hold the TouchSensor for printing coordinates
						children [
							DEF MeshTS TouchSensor {}
							Shape {
								appearance Appearance {
									material Material {
										emissiveColor    0 0.0394919 0.0513394
									}
								}
								geometry DEF ifsNode IndexedFaceSet {
									coord DEF coordinateNode Coordinate {
										point []
									}
									#normal
									color DEF colorNode Color {
										color []
									}
									solid FALSE
									creaseAngle    3.14159
									coordIndex    []
									colorIndex    []
									normalIndex    []
								}
							}
						]
					}
					#Shape { geometry Box { size 50 50 50 } }
					Transform {
						translation 0 300 0
						children [
							Shape {
								appearance Appearance {
									material DEF graphMaterial Material {
										#emissiveColor       0.6 0 0
										emissiveColor       0.8 0.8 0.8
									}
								}
								geometry DEF ilsNode IndexedLineSet {
									coord DEF plotCoordinateNode Coordinate {
										point []
									}
									coordIndex  []
								}
							}
						]
					}

					Transform {
						translation -730 300 0
						children [
							Shape {
								# appearance Appearance { material Material { diffuseColor 1 1 0 } }
								appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
								geometry Text {
									string "-10 mm"
									fontStyle FontStyle {
										family "SANS"
										size 60
									}
								}
							}
						]
					}

					Transform {
						translation -570 680 0
						children [
							Shape {
								# appearance Appearance { material Material { diffuseColor 1 1 0 } }
								appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
								geometry DEF NSQUARE_TEXT Text {
									string "9"
									fontStyle FontStyle {
										justify "END"
										family "SANS"
										size 60
									}
								}
							}
						]
					}

					Transform {
						translation 520 300 0
						children [
							Shape {
								# appearance Appearance { material Material { diffuseColor 1 1 0 } }
								appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
								geometry Text {
									string "10 mm"
									fontStyle FontStyle {
										family "SANS"
										size 60
									}
								}
							}
						]
					}

					Transform {
						translation -520 550 0
						children [
							Shape {
								appearance Appearance { material Material { diffuseColor 0.4 0.4 0.4 } }
								geometry Cylinder {
									height 500
									radius 6
								}
							}
							Transform {
								translation 0 410 0
								rotation 0 0 1 3.14159
								children GreyNYCone { coneScale 25 25 25 }
							}

							Transform {
								translation 0 150 0
								rotation 0 0 1 1.5707963
								children [
									Shape {
										appearance Appearance { material Material { diffuseColor 0.4 0.4 0.4 } }
										geometry Cylinder {
											height 50
											radius 6
										}
									}
								]
							}
						]
					}
				]
			}
		}

		##########################################################################
		# The aperture geometry
		##########################################################################
		Shape {
			appearance Appearance {
				material Material {
					diffuseColor 0.5 0.6 0.7
					transparency 0.6
				}
			}
			geometry DEF slitIFSNode IndexedFaceSet {
				coord DEF slitCoordinateNode Coordinate {
					point []
				}
				# normal DEF slitNormalNode Normal { vector [] }
				#solid       FALSE
				#normalPerVertex FALSE
				coordIndex  []
				normalIndex []
			}
		}
	]
}

#Converts an X into a -Z translation (those components only)
DEF AXIS_SWITCHER Script {
	eventIn SFFloat t_in
	eventOut SFVec3f t_out

	url "javascript: function t_in(value,time) {t_out[2]=-value/2;}"
}

ROUTE screenDragger.position_changed TO AXIS_SWITCHER.t_in
ROUTE AXIS_SWITCHER.t_out TO screenMover.set_translation
ROUTE AXIS_SWITCHER.t_out TO screenMeshMover.set_translation
##############################################################################
