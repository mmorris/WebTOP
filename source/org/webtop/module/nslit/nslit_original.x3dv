#X3D V3.0 utf8

#VRML Authors:  Kiril Vidimce, Davis Herring
#X3D Author(s): Paul Cleveland

PROFILE Immersive

##############################################################################
# NSlitDragger
##############################################################################
PROTO NSlitDragger [
	#Oddly enough, this file doesn't use the following three values.
	#classes FraunNSlit and NSlitDragger do, though, to talk to each other.
	inputOutput SFInt32 n 3
	inputOutput SFFloat width 40
	inputOutput SFFloat distance 220

	inputOutput SFInt32 dd_on 0

	inputOnly SFFloat set_max_wd_position
	initializeOnly   SFFloat max_wd_position 499

	inputOnly SFFloat set_min_wd_position
	initializeOnly   SFFloat min_wd_position 0

	inputOnly SFFloat set_max_dd_position
	initializeOnly   SFFloat max_dd_position 499

	inputOnly SFFloat set_min_dd_position
	initializeOnly   SFFloat min_dd_position 0

	initializeOnly    SFFloat wd_position 240
	inputOnly  SFFloat set_wd_position
	outputOnly SFFloat wd_position_changed

	initializeOnly    SFFloat dd_position 220
	inputOnly  SFFloat set_dd_position
	outputOnly SFFloat dd_position_changed

	outputOnly SFBool wd_isOver_changed
	outputOnly SFBool wd_isActive_changed

	outputOnly SFBool dd_isOver_changed
	outputOnly SFBool dd_isActive_changed ]
{
#These protos were copied from the March 10 2002 version of vrmllib/Widgets.wrl.
#(Blaxxun Contact 5 has issues with certain kinds of nested PROTO definitions.)
	PROTO NSD_XDragWidget [ inputOutput SFVec3f translation 0 0 0		#Of geometry
													inputOutput SFRotation rotation 0 0 1 0	#Of whole widget

													initializeOnly SFFloat position 0
													inputOnly SFFloat set_position
													outputOnly SFFloat position_changed
													outputOnly SFFloat inversePosition_out

													initializeOnly SFFloat minPosition 0
													inputOnly SFFloat set_minPosition
													initializeOnly SFFloat maxPosition 1
													inputOnly SFFloat set_maxPosition

													outputOnly SFBool isOver_out
													outputOnly SFBool isActive_out
													inputOnly SFBool set_isActive

													inputOutput SFBool enabled TRUE

													inputOutput MFNode geometry Group {}
													inputOutput MFNode activeGeometry Group {} ]
	{
		Transform {
			rotation IS rotation
			children [
				TouchSensor {
					isOver IS isOver_out
					enabled IS enabled
				}
				DEF PS PlaneSensor {
					isActive IS isActive_out
					enabled IS enabled
				}
				Transform {
					translation IS translation
					children DEF GEOM_XFORM Transform {
						children [
							DEF GEOM_SWITCH Switch {
								whichChoice 0
								choice [ Group { children IS geometry }
												 Group { children IS activeGeometry } ]
							}
						]
					}
				}
			]
		}
		DEF XDRAG_SCRIPT Script {
			initializeOnly 	SFFloat startPos IS position
			inputOnly SFFloat pos_in   IS set_position
			outputOnly SFFloat pos_out IS position_changed
			outputOnly SFFloat inv_out IS inversePosition_out

			inputOnly SFVec3f ps_trans_in

			initializeOnly 	SFFloat maxPos IS maxPosition
			initializeOnly 	SFFloat minPos IS minPosition
			inputOnly SFFloat set_maxPosition IS set_maxPosition
			inputOnly SFFloat set_minPosition IS set_minPosition

			inputOnly SFBool active_in IS set_isActive

			outputOnly SFInt32 whichChoice_out

			outputOnly SFVec3f offset_out
			outputOnly SFVec2f maxPos_out
			outputOnly SFVec2f minPos_out
			inputOnly SFVec3f ps_offset_in

			outputOnly SFVec3f geom_trans_out

			url "vrmlscript:
			function initialize() {
				set_maxPosition(maxPos,null);
				set_minPosition(minPos,null);

				pos_in(startPos,null);
			}

			function pos_in(value, time)
			{ set_trans_internal(value);
				offset_out[0] = value - whichChoice_out*(ps_trans_in[0]-ps_offset_in[0]);}

			function ps_trans_in(value, time)
			{ set_trans_internal(value[0]);}

			function set_trans_internal(value)
			{ geom_trans_out[0] = value;
				inv_out = -(pos_out=value);}

			function active_in(value,time) { whichChoice_out=value?1:0; }

			// setting the second values to 0 clamps the translation in the
			// y direction, so motion occurs only in x.
			function set_maxPosition(value,time) { maxPos_out = new SFVec2f(value,0); }
			function set_minPosition(value,time) { minPos_out = new SFVec2f(value,0); }"
		}
		ROUTE PS.translation_changed TO XDRAG_SCRIPT.ps_trans_in
		ROUTE	PS.offset_changed TO XDRAG_SCRIPT.ps_offset_in
		ROUTE PS.isActive TO XDRAG_SCRIPT.active_in
		ROUTE XDRAG_SCRIPT.whichChoice_out TO GEOM_SWITCH.whichChoice
		ROUTE XDRAG_SCRIPT.geom_trans_out TO GEOM_XFORM.set_translation
		ROUTE XDRAG_SCRIPT.offset_out	TO PS.set_offset
		ROUTE XDRAG_SCRIPT.maxPos_out TO PS.maxPosition
		ROUTE XDRAG_SCRIPT.minPos_out TO PS.minPosition
	}

	PROTO NSD_XColorCone [ inputOutput SFNode material Material {}
										 inputOutput SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			rotation 0 0 1 -1.570796
			scale IS coneScale
			children Shape {
					appearance Appearance {
							material IS material
						}
					geometry Cone {
							bottomRadius 0.5
							height 2
						}
				}
		}
	}

	PROTO NSD_TwoXColorCone [ inputOutput SFNode material Material {}
												inputOutput SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			scale IS coneScale
			children [
				Transform {
					translation 1 0 0
					children NSD_XColorCone { material IS material }
				}
				Transform {
					translation -1 0 0
					rotation 0 1 0 3.141592654
					children NSD_XColorCone { material IS material }
				}
			]
		}
	}

	PROTO NSD_NegYColorCone [ inputOutput SFNode coneMaterial Material {}
												inputOutput SFVec3f coneScale 1 1 1 ]
	{
		Transform {
			scale IS coneScale
			children Transform {
				translation 0 6 0
				rotation 1 0 0  3.141592654
				children Shape {
					appearance Appearance {
						material IS coneMaterial
					}
					geometry Cone { bottomRadius 0.5 }
				}
			}
		}
	}

	#Colors of cones:

	PROTO NSD_Red2XCone [ inputOutput SFVec3f coneScale 1 1 1 ]
	{
		NSD_TwoXColorCone {
			material Material { diffuseColor .5 0 0 }
			coneScale IS coneScale
		}
	}
	PROTO NSD_ActiveRed2XCone [ inputOutput SFVec3f coneScale 1 1 1 ]
	{
		NSD_TwoXColorCone {
			material Material { diffuseColor 1 0 0 }
			coneScale IS coneScale
		}
	}

	PROTO NSD_BlueNYCone [ inputOutput SFVec3f coneScale 1 1 1 ]
	{
		NSD_NegYColorCone {
			coneMaterial Material { diffuseColor 0 0 .5 }
			coneScale IS coneScale
		}
	}
	PROTO NSD_ActiveBlueNYCone [ inputOutput SFVec3f coneScale 1 1 1 ]
	{
		NSD_NegYColorCone {
			coneMaterial Material { diffuseColor 0 0 1 }
			coneScale IS coneScale
		}
	}

	Group {
		children [
			########################################################################
			# Width Draggers

			#This is the one on the right
			# translation 0 150 0 # -500
			DEF wd NSD_XDragWidget {
				# minPosition 19.9
				# maxPosition 0
				position IS wd_position
				set_position IS set_wd_position
				position_changed IS wd_position_changed
				isOver_out IS wd_isOver_changed
				isActive_out IS wd_isActive_changed
				geometry NSD_Red2XCone { coneScale 25 25 25 }
				activeGeometry NSD_ActiveRed2XCone { coneScale 25 25 25 }
			}

			#Cheat cheat cheat!  The one on the left is actually the same dragger.
			Transform {
				rotation 0 1 0 3.14159265
				children USE wd
			}

			########################################################################
			# Distance Draggers
			DEF dd_SWITCH Switch {
				whichChoice IS dd_on
				choice [
					Group {
						children [
							#This is the one on the right.
							DEF dd NSD_XDragWidget {
								# minPosition 19.9
								# maxPosition 0
								position IS	dd_position
								set_position IS set_dd_position
								position_changed IS dd_position_changed
								isOver_out IS dd_isOver_changed
								isActive_out IS dd_isActive_changed
								geometry NSD_BlueNYCone { coneScale 25 25 25 }
								activeGeometry NSD_ActiveBlueNYCone { coneScale 25 25 25 }
							}

							#Cheating again
							Transform {
								rotation 0 1 0 3.14159265
								children USE dd
							}
						]
					}
				]
			}

			DEF CONTROL_MIN_MAX Script {
				initializeOnly    SFFloat minWidth IS min_wd_position
				inputOnly  SFFloat set_minWidth IS set_min_wd_position
				outputOnly SFFloat minWidth_changed

				initializeOnly    SFFloat maxWidth IS max_wd_position
				inputOnly  SFFloat set_maxWidth IS set_max_wd_position
				outputOnly SFFloat maxWidth_changed

				initializeOnly    SFFloat minDistance IS min_dd_position
				inputOnly  SFFloat set_minDistance IS set_min_dd_position
				outputOnly SFFloat minDistance_changed

				initializeOnly    SFFloat maxDistance IS max_dd_position
				inputOnly  SFFloat set_maxDistance IS set_max_dd_position
				outputOnly SFFloat maxDistance_changed

				url "ecmascript:
				function initialize() {
					minWidth_changed = minWidth;
					maxWidth_changed = maxWidth;
					minDistance_changed = minDistance;
					maxDistance_changed = maxDistance;
				}

				function set_minWidth(value, time) {
					minWidth_changed = value;
				}

				function set_maxWidth(value, time) {
					maxWidth_changed = value;
				}

				function set_minDistance(value, time) {
					minDistance_changed = value;
				}

				function set_maxDistance(value, time) {
					maxDistance_changed = value;
				}"
			}
		]
	}

	############################################################################
	# The minimums and maximums for the widgets
	############################################################################
	ROUTE CONTROL_MIN_MAX.minWidth_changed TO wd.set_minPosition
	ROUTE CONTROL_MIN_MAX.maxWidth_changed TO wd.set_maxPosition

	ROUTE CONTROL_MIN_MAX.minDistance_changed TO dd.set_minPosition
	ROUTE CONTROL_MIN_MAX.maxDistance_changed TO dd.set_maxPosition
}

##############################################################################
# Viewpoints
##############################################################################
#DEF Home Viewpoint {
#  position    700 500 800
#  orientation -0.568136 0.813853 0.121918, 0.580938
#  description "Home"
#}

#DEF camera Viewpoint {
#  position    0.047699 -3.8147e-05 1686.31
#  orientation 0 0 1  0
#  fieldOfView 0.785398
#  description "camera"
#}
##############################################################################

##########################################################################
# Warning text
##########################################################################
DEF warningText Switch {
	whichChoice 0
	choice [
		Billboard {
			axisOfRotation 0 0 0
			children [
				Transform {
					translation -250 0 150
					children [
						Shape {
							appearance Appearance {
								material Material {
									diffuseColor 0 0 0    # black
									specularColor 0 0 0   # black
									ambientIntensity 0.0  # black
									shininess 0.0         # none
									emissiveColor 1 0 0
								}
							}
							geometry Text {
								string "Loading... Please wait."
								fontStyle FontStyle {
									size 120
								}
							}
						}
					]
				}
			]
		}
	]
}
##########################################################################
##########################################################################
# Bounding Box
##########################################################################
Inline {
	url "../vrmllib/BoundingBox.wrl"
	bboxSize 1000 300 1000
	bboxCenter 0 0 -500
}
##########################################################################
# N-Slit Dragger
##########################################################################
DEF nslitDraggerSwitch Switch {
	whichChoice 0
	choice
		DEF nslitDragger NSlitDragger {}
}
##########################################################################
# Wavelength wheel dragger
##########################################################################
DEF wavelengthWidgetSwitch Switch {
	whichChoice 0
	choice [
		Transform {
			scale 75 75 75
			translation 0 -30 220
			children DEF wavelengthWidget WheelWidget { }
		}
	]
}
##########################################################################
# Wave lines and the light symbol
##########################################################################
Transform {
	translation    0 50 300
	rotation    0 1 0  1.5707963
	children [
		Group {
			children [
				Shape {
					appearance Appearance {
						material DEF _DefMat Material {
							emissiveColor 0 0.7 0.7
						}
					}
					geometry IndexedLineSet {
						coord Coordinate {
							point    [ 0 0 0,
								1.4411 4.21593 0,
								2.88219 8.09198 0,
								4.32329 11.3156 0,
								5.76439 13.627 0,
								7.20549 14.8398 0,
								8.64659 14.8561 0,
								10.0877 13.6748 0,
								11.5288 11.391 0,
								12.9699 8.18878 0,
								14.411 4.32642 0,
								15.8521 0.115254 0,
								17.2932 -4.1052 0,
								18.7343 -7.99469 0,
								20.1754 -11.2396 0,
								21.6165 -13.5784 0,
								23.0576 -14.8225 0,
								24.4987 -14.8716 0,
								25.9398 -13.7217 0,
								27.3809 -11.4656 0,
								28.8219 -8.28511 0,
								30.263 -4.43665 0,
								31.7041 -0.230501 0,
								33.1452 3.99423 0,
								34.5863 7.89693 0,
								36.0274 11.163 0,
								37.4685 13.5291 0,
								38.9096 14.8044 0,
								40.3507 14.8862 0,
								41.7918 13.7679 0,
								43.2329 11.5396 0,
								44.674 8.38095 0,
								46.1151 4.54661 0,
								47.5562 0.345738 0,
								48.9973 -3.88301 0,
								50.4384 -7.79872 0,
								51.8795 -11.0857 0,
								53.3206 -13.4789 0,
								54.7617 -14.7854 0,
								56.2028 -14.9 0,
								57.6439 -13.8132 0,
								59.085 -11.6129 0,
								60.5261 -8.47628 0,
								61.9672 -4.65631 0,
								63.4083 -0.460947 0,
								64.8494 3.77157 0,
								66.2905 7.70003 0,
								67.7316 11.0077 0,
								69.1727 13.4279 0,
								70.6138 14.7656 0,
								72.0549 14.9128 0,
								73.496 13.8578 0,
								74.9371 11.6855 0,
								76.3782 8.57112 0,
								77.8193 4.76574 0,
								79.2604 0.576144 0,
								80.7015 -3.6599 0,
								82.1425 -7.60088 0,
								83.5836 -10.9291 0,
								85.0247 -13.3762 0,
								86.4658 -14.7448 0,
								87.9069 -14.9248 0,
								89.348 -13.9015 0,
								90.7891 -11.7574 0,
								92.2302 -8.66545 0,
								93.6713 -4.87488 0,
								95.1124 -0.691292 0,
								96.5535 3.54803 0,
								97.9946 7.5013 0,
								99.4357 10.8498 0,
								100.877 13.3236 0,
								102.318 14.7232 0,
								103.759 14.9359 0,
								105.2 13.9443 0,
								106.641 11.8286 0,
								108.082 8.75926 0,
								109.523 4.98373 0,
								110.965 0.8064 0,
								112.406 -3.43594 0,
								113.847 -7.40128 0,
								115.288 -10.7699 0,
								116.729 -13.2703 0,
								118.17 -14.7008 0,
								119.611 -14.9461 0,
								121.052 -13.9864 0,
								122.493 -11.8991 0,
								123.934 -8.85256 0,
								125.375 -5.09229 0,
								126.817 -0.921459 0,
								128.258 3.32365 0,
								129.699 7.30081 0,
								131.14 10.6894 0,
								132.581 13.2161 0,
								134.022 14.6774 0,
								135.463 14.9554 0,
								136.904 14.0276 0,
								138.345 11.969 0,
								139.786 8.94537 0,
								141.228 5.20057 0,
								142.669 1.03649 0,
								144.11 -3.21114 0,
								145.551 -7.19992 0,
								146.992 -10.6082 0,
								148.433 -13.1612 0,
								149.874 -14.6532 0,
								151.315 -14.9638 0,
								152.756 -14.0681 0,
								154.197 -12.0381 0,
								155.639 -9.03762 0,
								157.08 -5.30852 0 ]
						}
						coordIndex    [ 0, 1, 2, 3, 4, 5, 6, 7,
							8, 9, 10, 11, 12, 13, 14, 15,
							16, 17, 18, 19, 20, 21, 22, 23,
							24, 25, 26, 27, 28, 29, 30, 31,
							32, 33, 34, 35, 36, 37, 38, 39,
							40, 41, 42, 43, 44, 45, 46, 47,
							48, 49, 50, 51, 52, 53, 54, 55,
							56, 57, 58, 59, 60, 61, 62, 63,
							64, 65, 66, 67, 68, 69, 70, 71,
							72, 73, 74, 75, 76, 77, 78, 79,
							80, 81, 82, 83, 84, 85, 86, 87,
							88, 89, 90, 91, 92, 93, 94, 95,
							96, 97, 98, 99, 100, 101, 102, 103,
							104, 105, 106, 107, 108, 109, -1 ]
					}
				}
			]
		}
		Transform {
			translation    35 50 0
			rotation    0 -1 0  1.5707963
			scale    10 10 10
			children [
				Inline {
					#url    "LightSource.wrl"
					# bboxSize    3 3.00009 14
					# bboxCenter    0 2.5034e-05 -4
				}
			]
		}
	]
}
##########################################################################
# Screen distance dragger
##########################################################################
DEF screenDraggerSwitch Switch {
	whichChoice 0
	choice [
		Transform {
			translation 0 150 0 # -500
			scale	.5 .5 .5
			#rotation 0 1 0 1.5707963
			rotation -1 1 1 2.1		#a vector (X,Y,Z) without -> (-Y,Z,-X) with
			children [
				DEF screenDragger RedConeXDragger {
					coneScale 50 50 50
					minPosition 1000
					maxPosition 2000
					position 1000
				}
			]
		}
	]
}

##########################################################################
# Screen box
##########################################################################
DEF screenMover Transform {
	translation 0 0 -1000
	children [
		Shape {
			appearance Appearance {
				material Material { diffuseColor 1 1 0 }
			}
			geometry IndexedFaceSet {
				coord Coordinate {
					point [
						500 -150 -10,
						-500 -150 -10,
						-500  150 -10,
						500  150 -10,
						500 -150   0,
						-500 -150   0,
						-500  150   0,
						500  150   0,
					]
				}
				coordIndex [
					0, 1, 2, 3, -1, # back
					1, 5, 6, 2, -1, # left
					0, 3, 7, 4, -1, # right
					3, 2, 6, 7, -1, # top
					0, 4, 5, 1, -1, # bottom
				]
			}
		}
	]
}
##########################################################################
# The actual observation screen geometry + color
##########################################################################
Transform {
	translation 0 -150 0 # -482  # moveScreen + 18
	children
	DEF screenMeshMover Transform {
		translation 0 0 -1000
		children [
			Group {				#To hold the TouchSensor for printing coordinates
				children [
					DEF MeshTS TouchSensor {}
					Shape {
						appearance Appearance {
							material Material {
								emissiveColor    0 0.0394919 0.0513394
							}
						}
						geometry DEF ifsNode IndexedFaceSet {
							coord DEF coordinateNode Coordinate {
								point []
							}
							#normal
							color DEF colorNode Color {
								color []
							}
							solid FALSE
							creaseAngle    3.14159
							coordIndex    []
							colorIndex    []
							normalIndex    []
						}
					}
				]
			}
			#Shape { geometry Box { size 50 50 50 } }
			Transform {
				translation 0 300 0
				children [
					Shape {
						appearance Appearance {
							material DEF graphMaterial Material {
								#emissiveColor       0.6 0 0
								emissiveColor       0.8 0.8 0.8
							}
						}
						geometry DEF ilsNode IndexedLineSet {
							coord DEF plotCoordinateNode Coordinate {
								point []
							}
							coordIndex  []
						}
					}
				]
			}
			Transform {
				translation -730 300 0
				children [
					Shape {
						# appearance Appearance { material Material { diffuseColor 1 1 0 } }
						appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
						geometry Text {
							string "-10 mm"
							fontStyle FontStyle {
								family "SANS"
								size 60
							}
						}
					}
				]
			}
			Transform {
				translation -570 680 0
				children [
					Shape {
						# appearance Appearance { material Material { diffuseColor 1 1 0 } }
						appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
						geometry DEF NSQUARE_TEXT Text {
							string "9"
							fontStyle FontStyle {
								justify "END"
								family "SANS"
								size 60
							}
						}
					}
				]
			}
			Transform {
				translation 520 300 0
				children [
					Shape {
						# appearance Appearance { material Material { diffuseColor 1 1 0 } }
						appearance Appearance { material Material { diffuseColor 0.8 0.8 0.8 emissiveColor 0.8 0.8 0.8 } }
						geometry Text {
							string "10 mm"
							fontStyle FontStyle {
								family "SANS"
								size 60
							}
						}
					}
				]
			}
			Transform {
				translation -520 550 0
				children [
					Shape {
						appearance Appearance { material Material { diffuseColor 0.4 0.4 0.4 } }
						geometry Cylinder {
							height 500
							radius 6
						}
					}
					Transform {
						translation 0 410 0
						rotation 0 0 1 3.14159
						children GreyNYCone { coneScale 25 25 25 }
					}
					Transform {
						translation 0 150 0
						rotation 0 0 1 1.5707963
						children [
							Shape {
								appearance Appearance { material Material { diffuseColor 0.4 0.4 0.4 } }
								geometry Cylinder {
									height 50
									radius 6
								}
							}
						]
					}
				]
			}
		]
	}
}
##########################################################################
# The aperture geometry
##########################################################################
Shape {
	appearance Appearance {
		material Material {
			diffuseColor 0.5 0.6 0.7
			transparency 0.6
		}
	}
	geometry DEF slitIFSNode IndexedFaceSet {
		coord DEF slitCoordinateNode Coordinate {
			point []
		}
		# normal DEF slitNormalNode Normal { vector [] }
		#solid       FALSE
		#normalPerVertex FALSE
		coordIndex  []
		normalIndex []
	}
}

#Converts an X into a -Z translation (those components only)
DEF AXIS_SWITCHER Script {
	inputOnly SFFloat t_in
	outputOnly SFVec3f t_out

	url "ecmascript: function t_in(value,time) {t_out[2]=-value/2;}"
}

ROUTE screenDragger.position_changed TO AXIS_SWITCHER.t_in
ROUTE AXIS_SWITCHER.t_out TO screenMover.set_translation
ROUTE AXIS_SWITCHER.t_out TO screenMeshMover.set_translation
##############################################################################
